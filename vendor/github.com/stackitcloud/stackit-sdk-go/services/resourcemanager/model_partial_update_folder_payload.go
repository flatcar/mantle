/*
Resource Manager API

API v2 to manage resource containers - organizations, folders, projects incl. labels  ### Resource Management STACKIT resource management handles the terms _Organization_, _Folder_, _Project_, _Label_, and the hierarchical structure between them. Technically, organizations,  folders, and projects are _Resource Containers_ to which a _Label_ can be attached to. The STACKIT _Resource Manager_ provides CRUD endpoints to query and to modify the state.  ### Organizations STACKIT organizations are the base element to create and to use cloud-resources. An organization is bound to one customer account. Organizations have a lifecycle. - Organizations are always the root node in resource hierarchy and do not have a parent  ### Projects STACKIT projects are needed to use cloud-resources. Projects serve as wrapper for underlying technical structures and processes. Projects have a lifecycle. Projects compared to folders may have different policies. - Projects are optional, but mandatory for cloud-resource usage - A project can be created having either an organization, or a folder as parent - A project must not have a project as parent - Project names under the same parent must not be unique - Root organization cannot be changed  ### Label STACKIT labels are key-value pairs including a resource container reference. Labels can be defined and attached freely to resource containers by which resources can be organized and queried. - Policy-based, immutable labels may exists

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resourcemanager

import (
	"encoding/json"
)

// checks if the PartialUpdateFolderPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PartialUpdateFolderPayload{}

/*
	types and functions for containerParentId
*/

// isNotNullableString
type PartialUpdateFolderPayloadGetContainerParentIdAttributeType = *string

func getPartialUpdateFolderPayloadGetContainerParentIdAttributeTypeOk(arg PartialUpdateFolderPayloadGetContainerParentIdAttributeType) (ret PartialUpdateFolderPayloadGetContainerParentIdRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setPartialUpdateFolderPayloadGetContainerParentIdAttributeType(arg *PartialUpdateFolderPayloadGetContainerParentIdAttributeType, val PartialUpdateFolderPayloadGetContainerParentIdRetType) {
	*arg = &val
}

type PartialUpdateFolderPayloadGetContainerParentIdArgType = string
type PartialUpdateFolderPayloadGetContainerParentIdRetType = string

/*
	types and functions for labels
*/

// isContainer
type PartialUpdateFolderPayloadGetLabelsAttributeType = *map[string]string
type PartialUpdateFolderPayloadGetLabelsArgType = map[string]string
type PartialUpdateFolderPayloadGetLabelsRetType = map[string]string

func getPartialUpdateFolderPayloadGetLabelsAttributeTypeOk(arg PartialUpdateFolderPayloadGetLabelsAttributeType) (ret PartialUpdateFolderPayloadGetLabelsRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setPartialUpdateFolderPayloadGetLabelsAttributeType(arg *PartialUpdateFolderPayloadGetLabelsAttributeType, val PartialUpdateFolderPayloadGetLabelsRetType) {
	*arg = &val
}

/*
	types and functions for name
*/

// isNotNullableString
type PartialUpdateFolderPayloadGetNameAttributeType = *string

func getPartialUpdateFolderPayloadGetNameAttributeTypeOk(arg PartialUpdateFolderPayloadGetNameAttributeType) (ret PartialUpdateFolderPayloadGetNameRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setPartialUpdateFolderPayloadGetNameAttributeType(arg *PartialUpdateFolderPayloadGetNameAttributeType, val PartialUpdateFolderPayloadGetNameRetType) {
	*arg = &val
}

type PartialUpdateFolderPayloadGetNameArgType = string
type PartialUpdateFolderPayloadGetNameRetType = string

// PartialUpdateFolderPayload struct for PartialUpdateFolderPayload
type PartialUpdateFolderPayload struct {
	// New parent identifier for the resource container - containerId as well as UUID identifier is supported.
	ContainerParentId PartialUpdateFolderPayloadGetContainerParentIdAttributeType `json:"containerParentId,omitempty"`
	// Labels are key-value string pairs that can be attached to a resource container. Some labels may be enforced via policies.  - A label key must match the regex `[A-ZÄÜÖa-zäüöß0-9_-]{1,64}`. - A label value must match the regex `^$|[A-ZÄÜÖa-zäüöß0-9_-]{1,64}`.
	Labels PartialUpdateFolderPayloadGetLabelsAttributeType `json:"labels,omitempty"`
	// New name for the resource container matching the regex `^[a-zA-ZäüöÄÜÖ0-9]( ?[a-zA-ZäüöÄÜÖß0-9_+&-]){0,39}$`.
	Name PartialUpdateFolderPayloadGetNameAttributeType `json:"name,omitempty"`
}

// NewPartialUpdateFolderPayload instantiates a new PartialUpdateFolderPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPartialUpdateFolderPayload() *PartialUpdateFolderPayload {
	this := PartialUpdateFolderPayload{}
	return &this
}

// NewPartialUpdateFolderPayloadWithDefaults instantiates a new PartialUpdateFolderPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPartialUpdateFolderPayloadWithDefaults() *PartialUpdateFolderPayload {
	this := PartialUpdateFolderPayload{}
	return &this
}

// GetContainerParentId returns the ContainerParentId field value if set, zero value otherwise.
func (o *PartialUpdateFolderPayload) GetContainerParentId() (res PartialUpdateFolderPayloadGetContainerParentIdRetType) {
	res, _ = o.GetContainerParentIdOk()
	return
}

// GetContainerParentIdOk returns a tuple with the ContainerParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartialUpdateFolderPayload) GetContainerParentIdOk() (ret PartialUpdateFolderPayloadGetContainerParentIdRetType, ok bool) {
	return getPartialUpdateFolderPayloadGetContainerParentIdAttributeTypeOk(o.ContainerParentId)
}

// HasContainerParentId returns a boolean if a field has been set.
func (o *PartialUpdateFolderPayload) HasContainerParentId() bool {
	_, ok := o.GetContainerParentIdOk()
	return ok
}

// SetContainerParentId gets a reference to the given string and assigns it to the ContainerParentId field.
func (o *PartialUpdateFolderPayload) SetContainerParentId(v PartialUpdateFolderPayloadGetContainerParentIdRetType) {
	setPartialUpdateFolderPayloadGetContainerParentIdAttributeType(&o.ContainerParentId, v)
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *PartialUpdateFolderPayload) GetLabels() (res PartialUpdateFolderPayloadGetLabelsRetType) {
	res, _ = o.GetLabelsOk()
	return
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartialUpdateFolderPayload) GetLabelsOk() (ret PartialUpdateFolderPayloadGetLabelsRetType, ok bool) {
	return getPartialUpdateFolderPayloadGetLabelsAttributeTypeOk(o.Labels)
}

// HasLabels returns a boolean if a field has been set.
func (o *PartialUpdateFolderPayload) HasLabels() bool {
	_, ok := o.GetLabelsOk()
	return ok
}

// SetLabels gets a reference to the given map[string]string and assigns it to the Labels field.
func (o *PartialUpdateFolderPayload) SetLabels(v PartialUpdateFolderPayloadGetLabelsRetType) {
	setPartialUpdateFolderPayloadGetLabelsAttributeType(&o.Labels, v)
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PartialUpdateFolderPayload) GetName() (res PartialUpdateFolderPayloadGetNameRetType) {
	res, _ = o.GetNameOk()
	return
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartialUpdateFolderPayload) GetNameOk() (ret PartialUpdateFolderPayloadGetNameRetType, ok bool) {
	return getPartialUpdateFolderPayloadGetNameAttributeTypeOk(o.Name)
}

// HasName returns a boolean if a field has been set.
func (o *PartialUpdateFolderPayload) HasName() bool {
	_, ok := o.GetNameOk()
	return ok
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PartialUpdateFolderPayload) SetName(v PartialUpdateFolderPayloadGetNameRetType) {
	setPartialUpdateFolderPayloadGetNameAttributeType(&o.Name, v)
}

func (o PartialUpdateFolderPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getPartialUpdateFolderPayloadGetContainerParentIdAttributeTypeOk(o.ContainerParentId); ok {
		toSerialize["ContainerParentId"] = val
	}
	if val, ok := getPartialUpdateFolderPayloadGetLabelsAttributeTypeOk(o.Labels); ok {
		toSerialize["Labels"] = val
	}
	if val, ok := getPartialUpdateFolderPayloadGetNameAttributeTypeOk(o.Name); ok {
		toSerialize["Name"] = val
	}
	return toSerialize, nil
}

type NullablePartialUpdateFolderPayload struct {
	value *PartialUpdateFolderPayload
	isSet bool
}

func (v NullablePartialUpdateFolderPayload) Get() *PartialUpdateFolderPayload {
	return v.value
}

func (v *NullablePartialUpdateFolderPayload) Set(val *PartialUpdateFolderPayload) {
	v.value = val
	v.isSet = true
}

func (v NullablePartialUpdateFolderPayload) IsSet() bool {
	return v.isSet
}

func (v *NullablePartialUpdateFolderPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePartialUpdateFolderPayload(val *PartialUpdateFolderPayload) *NullablePartialUpdateFolderPayload {
	return &NullablePartialUpdateFolderPayload{value: val, isSet: true}
}

func (v NullablePartialUpdateFolderPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePartialUpdateFolderPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
