/*
Resource Manager API

API v2 to manage resource containers - organizations, folders, projects incl. labels  ### Resource Management STACKIT resource management handles the terms _Organization_, _Folder_, _Project_, _Label_, and the hierarchical structure between them. Technically, organizations,  folders, and projects are _Resource Containers_ to which a _Label_ can be attached to. The STACKIT _Resource Manager_ provides CRUD endpoints to query and to modify the state.  ### Organizations STACKIT organizations are the base element to create and to use cloud-resources. An organization is bound to one customer account. Organizations have a lifecycle. - Organizations are always the root node in resource hierarchy and do not have a parent  ### Projects STACKIT projects are needed to use cloud-resources. Projects serve as wrapper for underlying technical structures and processes. Projects have a lifecycle. Projects compared to folders may have different policies. - Projects are optional, but mandatory for cloud-resource usage - A project can be created having either an organization, or a folder as parent - A project must not have a project as parent - Project names under the same parent must not be unique - Root organization cannot be changed  ### Label STACKIT labels are key-value pairs including a resource container reference. Labels can be defined and attached freely to resource containers by which resources can be organized and queried. - Policy-based, immutable labels may exists

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resourcemanager

import (
	"encoding/json"
	"fmt"
)

// checks if the ParentListInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ParentListInner{}

/*
	types and functions for containerId
*/

// isNotNullableString
type ParentListInnerGetContainerIdAttributeType = *string

func getParentListInnerGetContainerIdAttributeTypeOk(arg ParentListInnerGetContainerIdAttributeType) (ret ParentListInnerGetContainerIdRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setParentListInnerGetContainerIdAttributeType(arg *ParentListInnerGetContainerIdAttributeType, val ParentListInnerGetContainerIdRetType) {
	*arg = &val
}

type ParentListInnerGetContainerIdArgType = string
type ParentListInnerGetContainerIdRetType = string

/*
	types and functions for containerParentId
*/

// isNotNullableString
type ParentListInnerGetContainerParentIdAttributeType = *string

func getParentListInnerGetContainerParentIdAttributeTypeOk(arg ParentListInnerGetContainerParentIdAttributeType) (ret ParentListInnerGetContainerParentIdRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setParentListInnerGetContainerParentIdAttributeType(arg *ParentListInnerGetContainerParentIdAttributeType, val ParentListInnerGetContainerParentIdRetType) {
	*arg = &val
}

type ParentListInnerGetContainerParentIdArgType = string
type ParentListInnerGetContainerParentIdRetType = string

/*
	types and functions for id
*/

// isNotNullableString
type ParentListInnerGetIdAttributeType = *string

func getParentListInnerGetIdAttributeTypeOk(arg ParentListInnerGetIdAttributeType) (ret ParentListInnerGetIdRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setParentListInnerGetIdAttributeType(arg *ParentListInnerGetIdAttributeType, val ParentListInnerGetIdRetType) {
	*arg = &val
}

type ParentListInnerGetIdArgType = string
type ParentListInnerGetIdRetType = string

/*
	types and functions for name
*/

// isNotNullableString
type ParentListInnerGetNameAttributeType = *string

func getParentListInnerGetNameAttributeTypeOk(arg ParentListInnerGetNameAttributeType) (ret ParentListInnerGetNameRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setParentListInnerGetNameAttributeType(arg *ParentListInnerGetNameAttributeType, val ParentListInnerGetNameRetType) {
	*arg = &val
}

type ParentListInnerGetNameArgType = string
type ParentListInnerGetNameRetType = string

/*
	types and functions for parentId
*/

// isNotNullableString
type ParentListInnerGetParentIdAttributeType = *string

func getParentListInnerGetParentIdAttributeTypeOk(arg ParentListInnerGetParentIdAttributeType) (ret ParentListInnerGetParentIdRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setParentListInnerGetParentIdAttributeType(arg *ParentListInnerGetParentIdAttributeType, val ParentListInnerGetParentIdRetType) {
	*arg = &val
}

type ParentListInnerGetParentIdArgType = string
type ParentListInnerGetParentIdRetType = string

/*
	types and functions for type
*/

// isEnum

// ParentListInnerTypes Parent container type.
// value type for enums
type ParentListInnerTypes string

// List of Type
const (
	PARENTLISTINNERTYPE_FOLDER       ParentListInnerTypes = "FOLDER"
	PARENTLISTINNERTYPE_ORGANIZATION ParentListInnerTypes = "ORGANIZATION"
)

// All allowed values of ParentListInner enum
var AllowedParentListInnerTypesEnumValues = []ParentListInnerTypes{
	"FOLDER",
	"ORGANIZATION",
}

func (v *ParentListInnerTypes) UnmarshalJSON(src []byte) error {
	// use a type alias to prevent infinite recursion during unmarshal,
	// see https://biscuit.ninja/posts/go-avoid-an-infitine-loop-with-custom-json-unmarshallers
	type TmpJson ParentListInnerTypes
	var value TmpJson
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	// Allow unmarshalling zero value for testing purposes
	var zeroValue TmpJson
	if value == zeroValue {
		return nil
	}
	enumTypeValue := ParentListInnerTypes(value)
	for _, existing := range AllowedParentListInnerTypesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ParentListInner", value)
}

// NewParentListInnerTypesFromValue returns a pointer to a valid ParentListInnerTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewParentListInnerTypesFromValue(v ParentListInnerTypes) (*ParentListInnerTypes, error) {
	ev := ParentListInnerTypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ParentListInnerTypes: valid values are %v", v, AllowedParentListInnerTypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ParentListInnerTypes) IsValid() bool {
	for _, existing := range AllowedParentListInnerTypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TypeTypes value
func (v ParentListInnerTypes) Ptr() *ParentListInnerTypes {
	return &v
}

type NullableParentListInnerTypes struct {
	value *ParentListInnerTypes
	isSet bool
}

func (v NullableParentListInnerTypes) Get() *ParentListInnerTypes {
	return v.value
}

func (v *NullableParentListInnerTypes) Set(val *ParentListInnerTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableParentListInnerTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableParentListInnerTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParentListInnerTypes(val *ParentListInnerTypes) *NullableParentListInnerTypes {
	return &NullableParentListInnerTypes{value: val, isSet: true}
}

func (v NullableParentListInnerTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParentListInnerTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

type ParentListInnerGetTypeAttributeType = *ParentListInnerTypes
type ParentListInnerGetTypeArgType = ParentListInnerTypes
type ParentListInnerGetTypeRetType = ParentListInnerTypes

func getParentListInnerGetTypeAttributeTypeOk(arg ParentListInnerGetTypeAttributeType) (ret ParentListInnerGetTypeRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setParentListInnerGetTypeAttributeType(arg *ParentListInnerGetTypeAttributeType, val ParentListInnerGetTypeRetType) {
	*arg = &val
}

// ParentListInner struct for ParentListInner
type ParentListInner struct {
	// User-friendly identifier of either organization or folder (will replace id).
	// REQUIRED
	ContainerId ParentListInnerGetContainerIdAttributeType `json:"containerId" required:"true"`
	// User-friendly parent identifier of either organization or folder (will replace parentId).
	ContainerParentId ParentListInnerGetContainerParentIdAttributeType `json:"containerParentId,omitempty"`
	// Identifier.
	// REQUIRED
	Id ParentListInnerGetIdAttributeType `json:"id" required:"true"`
	// Parent container name.
	// REQUIRED
	Name ParentListInnerGetNameAttributeType `json:"name" required:"true"`
	// Identifier of the parent resource container.
	ParentId ParentListInnerGetParentIdAttributeType `json:"parentId,omitempty"`
	// Parent container type.
	// REQUIRED
	Type ParentListInnerGetTypeAttributeType `json:"type" required:"true"`
}

type _ParentListInner ParentListInner

// NewParentListInner instantiates a new ParentListInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParentListInner(containerId ParentListInnerGetContainerIdArgType, id ParentListInnerGetIdArgType, name ParentListInnerGetNameArgType, types ParentListInnerGetTypeArgType) *ParentListInner {
	this := ParentListInner{}
	setParentListInnerGetContainerIdAttributeType(&this.ContainerId, containerId)
	setParentListInnerGetIdAttributeType(&this.Id, id)
	setParentListInnerGetNameAttributeType(&this.Name, name)
	setParentListInnerGetTypeAttributeType(&this.Type, types)
	return &this
}

// NewParentListInnerWithDefaults instantiates a new ParentListInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParentListInnerWithDefaults() *ParentListInner {
	this := ParentListInner{}
	return &this
}

// GetContainerId returns the ContainerId field value
func (o *ParentListInner) GetContainerId() (ret ParentListInnerGetContainerIdRetType) {
	ret, _ = o.GetContainerIdOk()
	return ret
}

// GetContainerIdOk returns a tuple with the ContainerId field value
// and a boolean to check if the value has been set.
func (o *ParentListInner) GetContainerIdOk() (ret ParentListInnerGetContainerIdRetType, ok bool) {
	return getParentListInnerGetContainerIdAttributeTypeOk(o.ContainerId)
}

// SetContainerId sets field value
func (o *ParentListInner) SetContainerId(v ParentListInnerGetContainerIdRetType) {
	setParentListInnerGetContainerIdAttributeType(&o.ContainerId, v)
}

// GetContainerParentId returns the ContainerParentId field value if set, zero value otherwise.
func (o *ParentListInner) GetContainerParentId() (res ParentListInnerGetContainerParentIdRetType) {
	res, _ = o.GetContainerParentIdOk()
	return
}

// GetContainerParentIdOk returns a tuple with the ContainerParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentListInner) GetContainerParentIdOk() (ret ParentListInnerGetContainerParentIdRetType, ok bool) {
	return getParentListInnerGetContainerParentIdAttributeTypeOk(o.ContainerParentId)
}

// HasContainerParentId returns a boolean if a field has been set.
func (o *ParentListInner) HasContainerParentId() bool {
	_, ok := o.GetContainerParentIdOk()
	return ok
}

// SetContainerParentId gets a reference to the given string and assigns it to the ContainerParentId field.
func (o *ParentListInner) SetContainerParentId(v ParentListInnerGetContainerParentIdRetType) {
	setParentListInnerGetContainerParentIdAttributeType(&o.ContainerParentId, v)
}

// GetId returns the Id field value
func (o *ParentListInner) GetId() (ret ParentListInnerGetIdRetType) {
	ret, _ = o.GetIdOk()
	return ret
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ParentListInner) GetIdOk() (ret ParentListInnerGetIdRetType, ok bool) {
	return getParentListInnerGetIdAttributeTypeOk(o.Id)
}

// SetId sets field value
func (o *ParentListInner) SetId(v ParentListInnerGetIdRetType) {
	setParentListInnerGetIdAttributeType(&o.Id, v)
}

// GetName returns the Name field value
func (o *ParentListInner) GetName() (ret ParentListInnerGetNameRetType) {
	ret, _ = o.GetNameOk()
	return ret
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ParentListInner) GetNameOk() (ret ParentListInnerGetNameRetType, ok bool) {
	return getParentListInnerGetNameAttributeTypeOk(o.Name)
}

// SetName sets field value
func (o *ParentListInner) SetName(v ParentListInnerGetNameRetType) {
	setParentListInnerGetNameAttributeType(&o.Name, v)
}

// GetParentId returns the ParentId field value if set, zero value otherwise.
func (o *ParentListInner) GetParentId() (res ParentListInnerGetParentIdRetType) {
	res, _ = o.GetParentIdOk()
	return
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentListInner) GetParentIdOk() (ret ParentListInnerGetParentIdRetType, ok bool) {
	return getParentListInnerGetParentIdAttributeTypeOk(o.ParentId)
}

// HasParentId returns a boolean if a field has been set.
func (o *ParentListInner) HasParentId() bool {
	_, ok := o.GetParentIdOk()
	return ok
}

// SetParentId gets a reference to the given string and assigns it to the ParentId field.
func (o *ParentListInner) SetParentId(v ParentListInnerGetParentIdRetType) {
	setParentListInnerGetParentIdAttributeType(&o.ParentId, v)
}

// GetType returns the Type field value
func (o *ParentListInner) GetType() (ret ParentListInnerGetTypeRetType) {
	ret, _ = o.GetTypeOk()
	return ret
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ParentListInner) GetTypeOk() (ret ParentListInnerGetTypeRetType, ok bool) {
	return getParentListInnerGetTypeAttributeTypeOk(o.Type)
}

// SetType sets field value
func (o *ParentListInner) SetType(v ParentListInnerGetTypeRetType) {
	setParentListInnerGetTypeAttributeType(&o.Type, v)
}

func (o ParentListInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getParentListInnerGetContainerIdAttributeTypeOk(o.ContainerId); ok {
		toSerialize["ContainerId"] = val
	}
	if val, ok := getParentListInnerGetContainerParentIdAttributeTypeOk(o.ContainerParentId); ok {
		toSerialize["ContainerParentId"] = val
	}
	if val, ok := getParentListInnerGetIdAttributeTypeOk(o.Id); ok {
		toSerialize["Id"] = val
	}
	if val, ok := getParentListInnerGetNameAttributeTypeOk(o.Name); ok {
		toSerialize["Name"] = val
	}
	if val, ok := getParentListInnerGetParentIdAttributeTypeOk(o.ParentId); ok {
		toSerialize["ParentId"] = val
	}
	if val, ok := getParentListInnerGetTypeAttributeTypeOk(o.Type); ok {
		toSerialize["Type"] = val
	}
	return toSerialize, nil
}

type NullableParentListInner struct {
	value *ParentListInner
	isSet bool
}

func (v NullableParentListInner) Get() *ParentListInner {
	return v.value
}

func (v *NullableParentListInner) Set(val *ParentListInner) {
	v.value = val
	v.isSet = true
}

func (v NullableParentListInner) IsSet() bool {
	return v.isSet
}

func (v *NullableParentListInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParentListInner(val *ParentListInner) *NullableParentListInner {
	return &NullableParentListInner{value: val, isSet: true}
}

func (v NullableParentListInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParentListInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
