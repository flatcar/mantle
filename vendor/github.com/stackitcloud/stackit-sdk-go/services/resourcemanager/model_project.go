/*
Resource Manager API

API v2 to manage resource containers - organizations, folders, projects incl. labels  ### Resource Management STACKIT resource management handles the terms _Organization_, _Folder_, _Project_, _Label_, and the hierarchical structure between them. Technically, organizations,  folders, and projects are _Resource Containers_ to which a _Label_ can be attached to. The STACKIT _Resource Manager_ provides CRUD endpoints to query and to modify the state.  ### Organizations STACKIT organizations are the base element to create and to use cloud-resources. An organization is bound to one customer account. Organizations have a lifecycle. - Organizations are always the root node in resource hierarchy and do not have a parent  ### Projects STACKIT projects are needed to use cloud-resources. Projects serve as wrapper for underlying technical structures and processes. Projects have a lifecycle. Projects compared to folders may have different policies. - Projects are optional, but mandatory for cloud-resource usage - A project can be created having either an organization, or a folder as parent - A project must not have a project as parent - Project names under the same parent must not be unique - Root organization cannot be changed  ### Label STACKIT labels are key-value pairs including a resource container reference. Labels can be defined and attached freely to resource containers by which resources can be organized and queried. - Policy-based, immutable labels may exists

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resourcemanager

import (
	"encoding/json"
	"time"
)

// checks if the Project type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Project{}

/*
	types and functions for containerId
*/

// isNotNullableString
type ProjectGetContainerIdAttributeType = *string

func getProjectGetContainerIdAttributeTypeOk(arg ProjectGetContainerIdAttributeType) (ret ProjectGetContainerIdRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setProjectGetContainerIdAttributeType(arg *ProjectGetContainerIdAttributeType, val ProjectGetContainerIdRetType) {
	*arg = &val
}

type ProjectGetContainerIdArgType = string
type ProjectGetContainerIdRetType = string

/*
	types and functions for creationTime
*/

// isDateTime
type ProjectGetCreationTimeAttributeType = *time.Time
type ProjectGetCreationTimeArgType = time.Time
type ProjectGetCreationTimeRetType = time.Time

func getProjectGetCreationTimeAttributeTypeOk(arg ProjectGetCreationTimeAttributeType) (ret ProjectGetCreationTimeRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setProjectGetCreationTimeAttributeType(arg *ProjectGetCreationTimeAttributeType, val ProjectGetCreationTimeRetType) {
	*arg = &val
}

/*
	types and functions for labels
*/

// isContainer
type ProjectGetLabelsAttributeType = *map[string]string
type ProjectGetLabelsArgType = map[string]string
type ProjectGetLabelsRetType = map[string]string

func getProjectGetLabelsAttributeTypeOk(arg ProjectGetLabelsAttributeType) (ret ProjectGetLabelsRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setProjectGetLabelsAttributeType(arg *ProjectGetLabelsAttributeType, val ProjectGetLabelsRetType) {
	*arg = &val
}

/*
	types and functions for lifecycleState
*/

// isEnumRef
type ProjectGetLifecycleStateAttributeType = *LifecycleState
type ProjectGetLifecycleStateArgType = LifecycleState
type ProjectGetLifecycleStateRetType = LifecycleState

func getProjectGetLifecycleStateAttributeTypeOk(arg ProjectGetLifecycleStateAttributeType) (ret ProjectGetLifecycleStateRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setProjectGetLifecycleStateAttributeType(arg *ProjectGetLifecycleStateAttributeType, val ProjectGetLifecycleStateRetType) {
	*arg = &val
}

/*
	types and functions for name
*/

// isNotNullableString
type ProjectGetNameAttributeType = *string

func getProjectGetNameAttributeTypeOk(arg ProjectGetNameAttributeType) (ret ProjectGetNameRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setProjectGetNameAttributeType(arg *ProjectGetNameAttributeType, val ProjectGetNameRetType) {
	*arg = &val
}

type ProjectGetNameArgType = string
type ProjectGetNameRetType = string

/*
	types and functions for parent
*/

// isModel
type ProjectGetParentAttributeType = *Parent
type ProjectGetParentArgType = Parent
type ProjectGetParentRetType = Parent

func getProjectGetParentAttributeTypeOk(arg ProjectGetParentAttributeType) (ret ProjectGetParentRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setProjectGetParentAttributeType(arg *ProjectGetParentAttributeType, val ProjectGetParentRetType) {
	*arg = &val
}

/*
	types and functions for projectId
*/

// isNotNullableString
type ProjectGetProjectIdAttributeType = *string

func getProjectGetProjectIdAttributeTypeOk(arg ProjectGetProjectIdAttributeType) (ret ProjectGetProjectIdRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setProjectGetProjectIdAttributeType(arg *ProjectGetProjectIdAttributeType, val ProjectGetProjectIdRetType) {
	*arg = &val
}

type ProjectGetProjectIdArgType = string
type ProjectGetProjectIdRetType = string

/*
	types and functions for updateTime
*/

// isDateTime
type ProjectGetUpdateTimeAttributeType = *time.Time
type ProjectGetUpdateTimeArgType = time.Time
type ProjectGetUpdateTimeRetType = time.Time

func getProjectGetUpdateTimeAttributeTypeOk(arg ProjectGetUpdateTimeAttributeType) (ret ProjectGetUpdateTimeRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setProjectGetUpdateTimeAttributeType(arg *ProjectGetUpdateTimeAttributeType, val ProjectGetUpdateTimeRetType) {
	*arg = &val
}

// Project struct for Project
type Project struct {
	// Globally unique, user-friendly identifier.
	// REQUIRED
	ContainerId ProjectGetContainerIdAttributeType `json:"containerId" required:"true"`
	// Timestamp at which the project was created.
	// REQUIRED
	CreationTime ProjectGetCreationTimeAttributeType `json:"creationTime" required:"true"`
	// Labels are key-value string pairs that can be attached to a resource container. Some labels may be enforced via policies.  - A label key must match the regex `[A-ZÄÜÖa-zäüöß0-9_-]{1,64}`. - A label value must match the regex `^$|[A-ZÄÜÖa-zäüöß0-9_-]{1,64}`.
	Labels ProjectGetLabelsAttributeType `json:"labels,omitempty"`
	// REQUIRED
	LifecycleState ProjectGetLifecycleStateAttributeType `json:"lifecycleState" required:"true"`
	// Project name.
	// REQUIRED
	Name ProjectGetNameAttributeType `json:"name" required:"true"`
	// REQUIRED
	Parent ProjectGetParentAttributeType `json:"parent" required:"true"`
	// Globally unique, project identifier.
	// REQUIRED
	ProjectId ProjectGetProjectIdAttributeType `json:"projectId" required:"true"`
	// Timestamp at which the project was last modified.
	// REQUIRED
	UpdateTime ProjectGetUpdateTimeAttributeType `json:"updateTime" required:"true"`
}

type _Project Project

// NewProject instantiates a new Project object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProject(containerId ProjectGetContainerIdArgType, creationTime ProjectGetCreationTimeArgType, lifecycleState ProjectGetLifecycleStateArgType, name ProjectGetNameArgType, parent ProjectGetParentArgType, projectId ProjectGetProjectIdArgType, updateTime ProjectGetUpdateTimeArgType) *Project {
	this := Project{}
	setProjectGetContainerIdAttributeType(&this.ContainerId, containerId)
	setProjectGetCreationTimeAttributeType(&this.CreationTime, creationTime)
	setProjectGetLifecycleStateAttributeType(&this.LifecycleState, lifecycleState)
	setProjectGetNameAttributeType(&this.Name, name)
	setProjectGetParentAttributeType(&this.Parent, parent)
	setProjectGetProjectIdAttributeType(&this.ProjectId, projectId)
	setProjectGetUpdateTimeAttributeType(&this.UpdateTime, updateTime)
	return &this
}

// NewProjectWithDefaults instantiates a new Project object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectWithDefaults() *Project {
	this := Project{}
	return &this
}

// GetContainerId returns the ContainerId field value
func (o *Project) GetContainerId() (ret ProjectGetContainerIdRetType) {
	ret, _ = o.GetContainerIdOk()
	return ret
}

// GetContainerIdOk returns a tuple with the ContainerId field value
// and a boolean to check if the value has been set.
func (o *Project) GetContainerIdOk() (ret ProjectGetContainerIdRetType, ok bool) {
	return getProjectGetContainerIdAttributeTypeOk(o.ContainerId)
}

// SetContainerId sets field value
func (o *Project) SetContainerId(v ProjectGetContainerIdRetType) {
	setProjectGetContainerIdAttributeType(&o.ContainerId, v)
}

// GetCreationTime returns the CreationTime field value
func (o *Project) GetCreationTime() (ret ProjectGetCreationTimeRetType) {
	ret, _ = o.GetCreationTimeOk()
	return ret
}

// GetCreationTimeOk returns a tuple with the CreationTime field value
// and a boolean to check if the value has been set.
func (o *Project) GetCreationTimeOk() (ret ProjectGetCreationTimeRetType, ok bool) {
	return getProjectGetCreationTimeAttributeTypeOk(o.CreationTime)
}

// SetCreationTime sets field value
func (o *Project) SetCreationTime(v ProjectGetCreationTimeRetType) {
	setProjectGetCreationTimeAttributeType(&o.CreationTime, v)
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *Project) GetLabels() (res ProjectGetLabelsRetType) {
	res, _ = o.GetLabelsOk()
	return
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetLabelsOk() (ret ProjectGetLabelsRetType, ok bool) {
	return getProjectGetLabelsAttributeTypeOk(o.Labels)
}

// HasLabels returns a boolean if a field has been set.
func (o *Project) HasLabels() bool {
	_, ok := o.GetLabelsOk()
	return ok
}

// SetLabels gets a reference to the given map[string]string and assigns it to the Labels field.
func (o *Project) SetLabels(v ProjectGetLabelsRetType) {
	setProjectGetLabelsAttributeType(&o.Labels, v)
}

// GetLifecycleState returns the LifecycleState field value
func (o *Project) GetLifecycleState() (ret ProjectGetLifecycleStateRetType) {
	ret, _ = o.GetLifecycleStateOk()
	return ret
}

// GetLifecycleStateOk returns a tuple with the LifecycleState field value
// and a boolean to check if the value has been set.
func (o *Project) GetLifecycleStateOk() (ret ProjectGetLifecycleStateRetType, ok bool) {
	return getProjectGetLifecycleStateAttributeTypeOk(o.LifecycleState)
}

// SetLifecycleState sets field value
func (o *Project) SetLifecycleState(v ProjectGetLifecycleStateRetType) {
	setProjectGetLifecycleStateAttributeType(&o.LifecycleState, v)
}

// GetName returns the Name field value
func (o *Project) GetName() (ret ProjectGetNameRetType) {
	ret, _ = o.GetNameOk()
	return ret
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Project) GetNameOk() (ret ProjectGetNameRetType, ok bool) {
	return getProjectGetNameAttributeTypeOk(o.Name)
}

// SetName sets field value
func (o *Project) SetName(v ProjectGetNameRetType) {
	setProjectGetNameAttributeType(&o.Name, v)
}

// GetParent returns the Parent field value
func (o *Project) GetParent() (ret ProjectGetParentRetType) {
	ret, _ = o.GetParentOk()
	return ret
}

// GetParentOk returns a tuple with the Parent field value
// and a boolean to check if the value has been set.
func (o *Project) GetParentOk() (ret ProjectGetParentRetType, ok bool) {
	return getProjectGetParentAttributeTypeOk(o.Parent)
}

// SetParent sets field value
func (o *Project) SetParent(v ProjectGetParentRetType) {
	setProjectGetParentAttributeType(&o.Parent, v)
}

// GetProjectId returns the ProjectId field value
func (o *Project) GetProjectId() (ret ProjectGetProjectIdRetType) {
	ret, _ = o.GetProjectIdOk()
	return ret
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *Project) GetProjectIdOk() (ret ProjectGetProjectIdRetType, ok bool) {
	return getProjectGetProjectIdAttributeTypeOk(o.ProjectId)
}

// SetProjectId sets field value
func (o *Project) SetProjectId(v ProjectGetProjectIdRetType) {
	setProjectGetProjectIdAttributeType(&o.ProjectId, v)
}

// GetUpdateTime returns the UpdateTime field value
func (o *Project) GetUpdateTime() (ret ProjectGetUpdateTimeRetType) {
	ret, _ = o.GetUpdateTimeOk()
	return ret
}

// GetUpdateTimeOk returns a tuple with the UpdateTime field value
// and a boolean to check if the value has been set.
func (o *Project) GetUpdateTimeOk() (ret ProjectGetUpdateTimeRetType, ok bool) {
	return getProjectGetUpdateTimeAttributeTypeOk(o.UpdateTime)
}

// SetUpdateTime sets field value
func (o *Project) SetUpdateTime(v ProjectGetUpdateTimeRetType) {
	setProjectGetUpdateTimeAttributeType(&o.UpdateTime, v)
}

func (o Project) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getProjectGetContainerIdAttributeTypeOk(o.ContainerId); ok {
		toSerialize["ContainerId"] = val
	}
	if val, ok := getProjectGetCreationTimeAttributeTypeOk(o.CreationTime); ok {
		toSerialize["CreationTime"] = val
	}
	if val, ok := getProjectGetLabelsAttributeTypeOk(o.Labels); ok {
		toSerialize["Labels"] = val
	}
	if val, ok := getProjectGetLifecycleStateAttributeTypeOk(o.LifecycleState); ok {
		toSerialize["LifecycleState"] = val
	}
	if val, ok := getProjectGetNameAttributeTypeOk(o.Name); ok {
		toSerialize["Name"] = val
	}
	if val, ok := getProjectGetParentAttributeTypeOk(o.Parent); ok {
		toSerialize["Parent"] = val
	}
	if val, ok := getProjectGetProjectIdAttributeTypeOk(o.ProjectId); ok {
		toSerialize["ProjectId"] = val
	}
	if val, ok := getProjectGetUpdateTimeAttributeTypeOk(o.UpdateTime); ok {
		toSerialize["UpdateTime"] = val
	}
	return toSerialize, nil
}

type NullableProject struct {
	value *Project
	isSet bool
}

func (v NullableProject) Get() *Project {
	return v.value
}

func (v *NullableProject) Set(val *Project) {
	v.value = val
	v.isSet = true
}

func (v NullableProject) IsSet() bool {
	return v.isSet
}

func (v *NullableProject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProject(val *Project) *NullableProject {
	return &NullableProject{value: val, isSet: true}
}

func (v NullableProject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
