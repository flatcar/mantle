/*
Resource Manager API

API v2 to manage resource containers - organizations, folders, projects incl. labels  ### Resource Management STACKIT resource management handles the terms _Organization_, _Folder_, _Project_, _Label_, and the hierarchical structure between them. Technically, organizations,  folders, and projects are _Resource Containers_ to which a _Label_ can be attached to. The STACKIT _Resource Manager_ provides CRUD endpoints to query and to modify the state.  ### Organizations STACKIT organizations are the base element to create and to use cloud-resources. An organization is bound to one customer account. Organizations have a lifecycle. - Organizations are always the root node in resource hierarchy and do not have a parent  ### Projects STACKIT projects are needed to use cloud-resources. Projects serve as wrapper for underlying technical structures and processes. Projects have a lifecycle. Projects compared to folders may have different policies. - Projects are optional, but mandatory for cloud-resource usage - A project can be created having either an organization, or a folder as parent - A project must not have a project as parent - Project names under the same parent must not be unique - Root organization cannot be changed  ### Label STACKIT labels are key-value pairs including a resource container reference. Labels can be defined and attached freely to resource containers by which resources can be organized and queried. - Policy-based, immutable labels may exists

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resourcemanager

import (
	"encoding/json"
)

// checks if the PartialUpdateOrganizationPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PartialUpdateOrganizationPayload{}

/*
	types and functions for labels
*/

// isContainer
type PartialUpdateOrganizationPayloadGetLabelsAttributeType = *map[string]string
type PartialUpdateOrganizationPayloadGetLabelsArgType = map[string]string
type PartialUpdateOrganizationPayloadGetLabelsRetType = map[string]string

func getPartialUpdateOrganizationPayloadGetLabelsAttributeTypeOk(arg PartialUpdateOrganizationPayloadGetLabelsAttributeType) (ret PartialUpdateOrganizationPayloadGetLabelsRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setPartialUpdateOrganizationPayloadGetLabelsAttributeType(arg *PartialUpdateOrganizationPayloadGetLabelsAttributeType, val PartialUpdateOrganizationPayloadGetLabelsRetType) {
	*arg = &val
}

/*
	types and functions for name
*/

// isNotNullableString
type PartialUpdateOrganizationPayloadGetNameAttributeType = *string

func getPartialUpdateOrganizationPayloadGetNameAttributeTypeOk(arg PartialUpdateOrganizationPayloadGetNameAttributeType) (ret PartialUpdateOrganizationPayloadGetNameRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setPartialUpdateOrganizationPayloadGetNameAttributeType(arg *PartialUpdateOrganizationPayloadGetNameAttributeType, val PartialUpdateOrganizationPayloadGetNameRetType) {
	*arg = &val
}

type PartialUpdateOrganizationPayloadGetNameArgType = string
type PartialUpdateOrganizationPayloadGetNameRetType = string

// PartialUpdateOrganizationPayload struct for PartialUpdateOrganizationPayload
type PartialUpdateOrganizationPayload struct {
	// Labels are key-value string pairs that can be attached to a resource container. Some labels may be enforced via policies.  - A label key must match the regex `[A-ZÄÜÖa-zäüöß0-9_-]{1,64}`. - A label value must match the regex `^$|[A-ZÄÜÖa-zäüöß0-9_-]{1,64}`.
	Labels PartialUpdateOrganizationPayloadGetLabelsAttributeType `json:"labels,omitempty"`
	// The new name of the organization matching the regex `^[a-zA-ZäüöÄÜÖ0-9]( ?[a-zA-ZäüöÄÜÖß0-9_+&-]){0,39}$`.
	Name PartialUpdateOrganizationPayloadGetNameAttributeType `json:"name,omitempty"`
}

// NewPartialUpdateOrganizationPayload instantiates a new PartialUpdateOrganizationPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPartialUpdateOrganizationPayload() *PartialUpdateOrganizationPayload {
	this := PartialUpdateOrganizationPayload{}
	return &this
}

// NewPartialUpdateOrganizationPayloadWithDefaults instantiates a new PartialUpdateOrganizationPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPartialUpdateOrganizationPayloadWithDefaults() *PartialUpdateOrganizationPayload {
	this := PartialUpdateOrganizationPayload{}
	return &this
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *PartialUpdateOrganizationPayload) GetLabels() (res PartialUpdateOrganizationPayloadGetLabelsRetType) {
	res, _ = o.GetLabelsOk()
	return
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartialUpdateOrganizationPayload) GetLabelsOk() (ret PartialUpdateOrganizationPayloadGetLabelsRetType, ok bool) {
	return getPartialUpdateOrganizationPayloadGetLabelsAttributeTypeOk(o.Labels)
}

// HasLabels returns a boolean if a field has been set.
func (o *PartialUpdateOrganizationPayload) HasLabels() bool {
	_, ok := o.GetLabelsOk()
	return ok
}

// SetLabels gets a reference to the given map[string]string and assigns it to the Labels field.
func (o *PartialUpdateOrganizationPayload) SetLabels(v PartialUpdateOrganizationPayloadGetLabelsRetType) {
	setPartialUpdateOrganizationPayloadGetLabelsAttributeType(&o.Labels, v)
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PartialUpdateOrganizationPayload) GetName() (res PartialUpdateOrganizationPayloadGetNameRetType) {
	res, _ = o.GetNameOk()
	return
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartialUpdateOrganizationPayload) GetNameOk() (ret PartialUpdateOrganizationPayloadGetNameRetType, ok bool) {
	return getPartialUpdateOrganizationPayloadGetNameAttributeTypeOk(o.Name)
}

// HasName returns a boolean if a field has been set.
func (o *PartialUpdateOrganizationPayload) HasName() bool {
	_, ok := o.GetNameOk()
	return ok
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PartialUpdateOrganizationPayload) SetName(v PartialUpdateOrganizationPayloadGetNameRetType) {
	setPartialUpdateOrganizationPayloadGetNameAttributeType(&o.Name, v)
}

func (o PartialUpdateOrganizationPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getPartialUpdateOrganizationPayloadGetLabelsAttributeTypeOk(o.Labels); ok {
		toSerialize["Labels"] = val
	}
	if val, ok := getPartialUpdateOrganizationPayloadGetNameAttributeTypeOk(o.Name); ok {
		toSerialize["Name"] = val
	}
	return toSerialize, nil
}

type NullablePartialUpdateOrganizationPayload struct {
	value *PartialUpdateOrganizationPayload
	isSet bool
}

func (v NullablePartialUpdateOrganizationPayload) Get() *PartialUpdateOrganizationPayload {
	return v.value
}

func (v *NullablePartialUpdateOrganizationPayload) Set(val *PartialUpdateOrganizationPayload) {
	v.value = val
	v.isSet = true
}

func (v NullablePartialUpdateOrganizationPayload) IsSet() bool {
	return v.isSet
}

func (v *NullablePartialUpdateOrganizationPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePartialUpdateOrganizationPayload(val *PartialUpdateOrganizationPayload) *NullablePartialUpdateOrganizationPayload {
	return &NullablePartialUpdateOrganizationPayload{value: val, isSet: true}
}

func (v NullablePartialUpdateOrganizationPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePartialUpdateOrganizationPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
