/*
Resource Manager API

API v2 to manage resource containers - organizations, folders, projects incl. labels  ### Resource Management STACKIT resource management handles the terms _Organization_, _Folder_, _Project_, _Label_, and the hierarchical structure between them. Technically, organizations,  folders, and projects are _Resource Containers_ to which a _Label_ can be attached to. The STACKIT _Resource Manager_ provides CRUD endpoints to query and to modify the state.  ### Organizations STACKIT organizations are the base element to create and to use cloud-resources. An organization is bound to one customer account. Organizations have a lifecycle. - Organizations are always the root node in resource hierarchy and do not have a parent  ### Projects STACKIT projects are needed to use cloud-resources. Projects serve as wrapper for underlying technical structures and processes. Projects have a lifecycle. Projects compared to folders may have different policies. - Projects are optional, but mandatory for cloud-resource usage - A project can be created having either an organization, or a folder as parent - A project must not have a project as parent - Project names under the same parent must not be unique - Root organization cannot be changed  ### Label STACKIT labels are key-value pairs including a resource container reference. Labels can be defined and attached freely to resource containers by which resources can be organized and queried. - Policy-based, immutable labels may exists

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resourcemanager

import (
	"encoding/json"
)

// checks if the CreateFolderPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateFolderPayload{}

/*
	types and functions for containerParentId
*/

// isNotNullableString
type CreateFolderPayloadGetContainerParentIdAttributeType = *string

func getCreateFolderPayloadGetContainerParentIdAttributeTypeOk(arg CreateFolderPayloadGetContainerParentIdAttributeType) (ret CreateFolderPayloadGetContainerParentIdRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setCreateFolderPayloadGetContainerParentIdAttributeType(arg *CreateFolderPayloadGetContainerParentIdAttributeType, val CreateFolderPayloadGetContainerParentIdRetType) {
	*arg = &val
}

type CreateFolderPayloadGetContainerParentIdArgType = string
type CreateFolderPayloadGetContainerParentIdRetType = string

/*
	types and functions for labels
*/

// isContainer
type CreateFolderPayloadGetLabelsAttributeType = *map[string]string
type CreateFolderPayloadGetLabelsArgType = map[string]string
type CreateFolderPayloadGetLabelsRetType = map[string]string

func getCreateFolderPayloadGetLabelsAttributeTypeOk(arg CreateFolderPayloadGetLabelsAttributeType) (ret CreateFolderPayloadGetLabelsRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setCreateFolderPayloadGetLabelsAttributeType(arg *CreateFolderPayloadGetLabelsAttributeType, val CreateFolderPayloadGetLabelsRetType) {
	*arg = &val
}

/*
	types and functions for members
*/

// isArray
type CreateFolderPayloadGetMembersAttributeType = *[]Member
type CreateFolderPayloadGetMembersArgType = []Member
type CreateFolderPayloadGetMembersRetType = []Member

func getCreateFolderPayloadGetMembersAttributeTypeOk(arg CreateFolderPayloadGetMembersAttributeType) (ret CreateFolderPayloadGetMembersRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setCreateFolderPayloadGetMembersAttributeType(arg *CreateFolderPayloadGetMembersAttributeType, val CreateFolderPayloadGetMembersRetType) {
	*arg = &val
}

/*
	types and functions for name
*/

// isNotNullableString
type CreateFolderPayloadGetNameAttributeType = *string

func getCreateFolderPayloadGetNameAttributeTypeOk(arg CreateFolderPayloadGetNameAttributeType) (ret CreateFolderPayloadGetNameRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setCreateFolderPayloadGetNameAttributeType(arg *CreateFolderPayloadGetNameAttributeType, val CreateFolderPayloadGetNameRetType) {
	*arg = &val
}

type CreateFolderPayloadGetNameArgType = string
type CreateFolderPayloadGetNameRetType = string

// CreateFolderPayload struct for CreateFolderPayload
type CreateFolderPayload struct {
	// Identifier of the parent resource container - containerId as well as UUID identifier is supported.
	// REQUIRED
	ContainerParentId CreateFolderPayloadGetContainerParentIdAttributeType `json:"containerParentId" required:"true"`
	// Labels are key-value string pairs that can be attached to a resource container. Some labels may be enforced via policies.  - A label key must match the regex `[A-ZÄÜÖa-zäüöß0-9_-]{1,64}`. - A label value must match the regex `^$|[A-ZÄÜÖa-zäüöß0-9_-]{1,64}`.
	Labels CreateFolderPayloadGetLabelsAttributeType `json:"labels,omitempty"`
	// The initial members assigned to the project. At least one subject needs to be a user, and not a client or service account.
	Members CreateFolderPayloadGetMembersAttributeType `json:"members,omitempty"`
	// The name of the folder matching the regex `^[a-zA-ZäüöÄÜÖ0-9]( ?[a-zA-ZäüöÄÜÖß0-9_+&-]){0,39}$`.
	// REQUIRED
	Name CreateFolderPayloadGetNameAttributeType `json:"name" required:"true"`
}

type _CreateFolderPayload CreateFolderPayload

// NewCreateFolderPayload instantiates a new CreateFolderPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateFolderPayload(containerParentId CreateFolderPayloadGetContainerParentIdArgType, name CreateFolderPayloadGetNameArgType) *CreateFolderPayload {
	this := CreateFolderPayload{}
	setCreateFolderPayloadGetContainerParentIdAttributeType(&this.ContainerParentId, containerParentId)
	setCreateFolderPayloadGetNameAttributeType(&this.Name, name)
	return &this
}

// NewCreateFolderPayloadWithDefaults instantiates a new CreateFolderPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateFolderPayloadWithDefaults() *CreateFolderPayload {
	this := CreateFolderPayload{}
	return &this
}

// GetContainerParentId returns the ContainerParentId field value
func (o *CreateFolderPayload) GetContainerParentId() (ret CreateFolderPayloadGetContainerParentIdRetType) {
	ret, _ = o.GetContainerParentIdOk()
	return ret
}

// GetContainerParentIdOk returns a tuple with the ContainerParentId field value
// and a boolean to check if the value has been set.
func (o *CreateFolderPayload) GetContainerParentIdOk() (ret CreateFolderPayloadGetContainerParentIdRetType, ok bool) {
	return getCreateFolderPayloadGetContainerParentIdAttributeTypeOk(o.ContainerParentId)
}

// SetContainerParentId sets field value
func (o *CreateFolderPayload) SetContainerParentId(v CreateFolderPayloadGetContainerParentIdRetType) {
	setCreateFolderPayloadGetContainerParentIdAttributeType(&o.ContainerParentId, v)
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *CreateFolderPayload) GetLabels() (res CreateFolderPayloadGetLabelsRetType) {
	res, _ = o.GetLabelsOk()
	return
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateFolderPayload) GetLabelsOk() (ret CreateFolderPayloadGetLabelsRetType, ok bool) {
	return getCreateFolderPayloadGetLabelsAttributeTypeOk(o.Labels)
}

// HasLabels returns a boolean if a field has been set.
func (o *CreateFolderPayload) HasLabels() bool {
	_, ok := o.GetLabelsOk()
	return ok
}

// SetLabels gets a reference to the given map[string]string and assigns it to the Labels field.
func (o *CreateFolderPayload) SetLabels(v CreateFolderPayloadGetLabelsRetType) {
	setCreateFolderPayloadGetLabelsAttributeType(&o.Labels, v)
}

// GetMembers returns the Members field value if set, zero value otherwise.
func (o *CreateFolderPayload) GetMembers() (res CreateFolderPayloadGetMembersRetType) {
	res, _ = o.GetMembersOk()
	return
}

// GetMembersOk returns a tuple with the Members field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateFolderPayload) GetMembersOk() (ret CreateFolderPayloadGetMembersRetType, ok bool) {
	return getCreateFolderPayloadGetMembersAttributeTypeOk(o.Members)
}

// HasMembers returns a boolean if a field has been set.
func (o *CreateFolderPayload) HasMembers() bool {
	_, ok := o.GetMembersOk()
	return ok
}

// SetMembers gets a reference to the given []Member and assigns it to the Members field.
func (o *CreateFolderPayload) SetMembers(v CreateFolderPayloadGetMembersRetType) {
	setCreateFolderPayloadGetMembersAttributeType(&o.Members, v)
}

// GetName returns the Name field value
func (o *CreateFolderPayload) GetName() (ret CreateFolderPayloadGetNameRetType) {
	ret, _ = o.GetNameOk()
	return ret
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateFolderPayload) GetNameOk() (ret CreateFolderPayloadGetNameRetType, ok bool) {
	return getCreateFolderPayloadGetNameAttributeTypeOk(o.Name)
}

// SetName sets field value
func (o *CreateFolderPayload) SetName(v CreateFolderPayloadGetNameRetType) {
	setCreateFolderPayloadGetNameAttributeType(&o.Name, v)
}

func (o CreateFolderPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getCreateFolderPayloadGetContainerParentIdAttributeTypeOk(o.ContainerParentId); ok {
		toSerialize["ContainerParentId"] = val
	}
	if val, ok := getCreateFolderPayloadGetLabelsAttributeTypeOk(o.Labels); ok {
		toSerialize["Labels"] = val
	}
	if val, ok := getCreateFolderPayloadGetMembersAttributeTypeOk(o.Members); ok {
		toSerialize["Members"] = val
	}
	if val, ok := getCreateFolderPayloadGetNameAttributeTypeOk(o.Name); ok {
		toSerialize["Name"] = val
	}
	return toSerialize, nil
}

type NullableCreateFolderPayload struct {
	value *CreateFolderPayload
	isSet bool
}

func (v NullableCreateFolderPayload) Get() *CreateFolderPayload {
	return v.value
}

func (v *NullableCreateFolderPayload) Set(val *CreateFolderPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateFolderPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateFolderPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateFolderPayload(val *CreateFolderPayload) *NullableCreateFolderPayload {
	return &NullableCreateFolderPayload{value: val, isSet: true}
}

func (v NullableCreateFolderPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateFolderPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
