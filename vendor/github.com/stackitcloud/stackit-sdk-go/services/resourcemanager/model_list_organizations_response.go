/*
Resource Manager API

API v2 to manage resource containers - organizations, folders, projects incl. labels  ### Resource Management STACKIT resource management handles the terms _Organization_, _Folder_, _Project_, _Label_, and the hierarchical structure between them. Technically, organizations,  folders, and projects are _Resource Containers_ to which a _Label_ can be attached to. The STACKIT _Resource Manager_ provides CRUD endpoints to query and to modify the state.  ### Organizations STACKIT organizations are the base element to create and to use cloud-resources. An organization is bound to one customer account. Organizations have a lifecycle. - Organizations are always the root node in resource hierarchy and do not have a parent  ### Projects STACKIT projects are needed to use cloud-resources. Projects serve as wrapper for underlying technical structures and processes. Projects have a lifecycle. Projects compared to folders may have different policies. - Projects are optional, but mandatory for cloud-resource usage - A project can be created having either an organization, or a folder as parent - A project must not have a project as parent - Project names under the same parent must not be unique - Root organization cannot be changed  ### Label STACKIT labels are key-value pairs including a resource container reference. Labels can be defined and attached freely to resource containers by which resources can be organized and queried. - Policy-based, immutable labels may exists

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resourcemanager

import (
	"encoding/json"
)

// checks if the ListOrganizationsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListOrganizationsResponse{}

/*
	types and functions for items
*/

// isArray
type ListOrganizationsResponseGetItemsAttributeType = *[]ListOrganizationsResponseItemsInner
type ListOrganizationsResponseGetItemsArgType = []ListOrganizationsResponseItemsInner
type ListOrganizationsResponseGetItemsRetType = []ListOrganizationsResponseItemsInner

func getListOrganizationsResponseGetItemsAttributeTypeOk(arg ListOrganizationsResponseGetItemsAttributeType) (ret ListOrganizationsResponseGetItemsRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setListOrganizationsResponseGetItemsAttributeType(arg *ListOrganizationsResponseGetItemsAttributeType, val ListOrganizationsResponseGetItemsRetType) {
	*arg = &val
}

/*
	types and functions for limit
*/

// isNumber
type ListOrganizationsResponseGetLimitAttributeType = *float64
type ListOrganizationsResponseGetLimitArgType = float64
type ListOrganizationsResponseGetLimitRetType = float64

func getListOrganizationsResponseGetLimitAttributeTypeOk(arg ListOrganizationsResponseGetLimitAttributeType) (ret ListOrganizationsResponseGetLimitRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setListOrganizationsResponseGetLimitAttributeType(arg *ListOrganizationsResponseGetLimitAttributeType, val ListOrganizationsResponseGetLimitRetType) {
	*arg = &val
}

/*
	types and functions for offset
*/

// isNumber
type ListOrganizationsResponseGetOffsetAttributeType = *float64
type ListOrganizationsResponseGetOffsetArgType = float64
type ListOrganizationsResponseGetOffsetRetType = float64

func getListOrganizationsResponseGetOffsetAttributeTypeOk(arg ListOrganizationsResponseGetOffsetAttributeType) (ret ListOrganizationsResponseGetOffsetRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setListOrganizationsResponseGetOffsetAttributeType(arg *ListOrganizationsResponseGetOffsetAttributeType, val ListOrganizationsResponseGetOffsetRetType) {
	*arg = &val
}

// ListOrganizationsResponse struct for ListOrganizationsResponse
type ListOrganizationsResponse struct {
	// REQUIRED
	Items ListOrganizationsResponseGetItemsAttributeType `json:"items" required:"true"`
	// The maximum number of projects to return in the response. If not present, an appropriate default will be used.
	// REQUIRED
	Limit ListOrganizationsResponseGetLimitAttributeType `json:"limit" required:"true"`
	// The offset of the first item in the collection to return.
	// REQUIRED
	Offset ListOrganizationsResponseGetOffsetAttributeType `json:"offset" required:"true"`
}

type _ListOrganizationsResponse ListOrganizationsResponse

// NewListOrganizationsResponse instantiates a new ListOrganizationsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListOrganizationsResponse(items ListOrganizationsResponseGetItemsArgType, limit ListOrganizationsResponseGetLimitArgType, offset ListOrganizationsResponseGetOffsetArgType) *ListOrganizationsResponse {
	this := ListOrganizationsResponse{}
	setListOrganizationsResponseGetItemsAttributeType(&this.Items, items)
	setListOrganizationsResponseGetLimitAttributeType(&this.Limit, limit)
	setListOrganizationsResponseGetOffsetAttributeType(&this.Offset, offset)
	return &this
}

// NewListOrganizationsResponseWithDefaults instantiates a new ListOrganizationsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListOrganizationsResponseWithDefaults() *ListOrganizationsResponse {
	this := ListOrganizationsResponse{}
	var limit float64 = 50
	this.Limit = &limit
	var offset float64 = 0
	this.Offset = &offset
	return &this
}

// GetItems returns the Items field value
func (o *ListOrganizationsResponse) GetItems() (ret ListOrganizationsResponseGetItemsRetType) {
	ret, _ = o.GetItemsOk()
	return ret
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *ListOrganizationsResponse) GetItemsOk() (ret ListOrganizationsResponseGetItemsRetType, ok bool) {
	return getListOrganizationsResponseGetItemsAttributeTypeOk(o.Items)
}

// SetItems sets field value
func (o *ListOrganizationsResponse) SetItems(v ListOrganizationsResponseGetItemsRetType) {
	setListOrganizationsResponseGetItemsAttributeType(&o.Items, v)
}

// GetLimit returns the Limit field value
func (o *ListOrganizationsResponse) GetLimit() (ret ListOrganizationsResponseGetLimitRetType) {
	ret, _ = o.GetLimitOk()
	return ret
}

// GetLimitOk returns a tuple with the Limit field value
// and a boolean to check if the value has been set.
func (o *ListOrganizationsResponse) GetLimitOk() (ret ListOrganizationsResponseGetLimitRetType, ok bool) {
	return getListOrganizationsResponseGetLimitAttributeTypeOk(o.Limit)
}

// SetLimit sets field value
func (o *ListOrganizationsResponse) SetLimit(v ListOrganizationsResponseGetLimitRetType) {
	setListOrganizationsResponseGetLimitAttributeType(&o.Limit, v)
}

// GetOffset returns the Offset field value
func (o *ListOrganizationsResponse) GetOffset() (ret ListOrganizationsResponseGetOffsetRetType) {
	ret, _ = o.GetOffsetOk()
	return ret
}

// GetOffsetOk returns a tuple with the Offset field value
// and a boolean to check if the value has been set.
func (o *ListOrganizationsResponse) GetOffsetOk() (ret ListOrganizationsResponseGetOffsetRetType, ok bool) {
	return getListOrganizationsResponseGetOffsetAttributeTypeOk(o.Offset)
}

// SetOffset sets field value
func (o *ListOrganizationsResponse) SetOffset(v ListOrganizationsResponseGetOffsetRetType) {
	setListOrganizationsResponseGetOffsetAttributeType(&o.Offset, v)
}

func (o ListOrganizationsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getListOrganizationsResponseGetItemsAttributeTypeOk(o.Items); ok {
		toSerialize["Items"] = val
	}
	if val, ok := getListOrganizationsResponseGetLimitAttributeTypeOk(o.Limit); ok {
		toSerialize["Limit"] = val
	}
	if val, ok := getListOrganizationsResponseGetOffsetAttributeTypeOk(o.Offset); ok {
		toSerialize["Offset"] = val
	}
	return toSerialize, nil
}

type NullableListOrganizationsResponse struct {
	value *ListOrganizationsResponse
	isSet bool
}

func (v NullableListOrganizationsResponse) Get() *ListOrganizationsResponse {
	return v.value
}

func (v *NullableListOrganizationsResponse) Set(val *ListOrganizationsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListOrganizationsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListOrganizationsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListOrganizationsResponse(val *ListOrganizationsResponse) *NullableListOrganizationsResponse {
	return &NullableListOrganizationsResponse{value: val, isSet: true}
}

func (v NullableListOrganizationsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListOrganizationsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
