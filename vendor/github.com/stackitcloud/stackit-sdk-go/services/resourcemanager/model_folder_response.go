/*
Resource Manager API

API v2 to manage resource containers - organizations, folders, projects incl. labels  ### Resource Management STACKIT resource management handles the terms _Organization_, _Folder_, _Project_, _Label_, and the hierarchical structure between them. Technically, organizations,  folders, and projects are _Resource Containers_ to which a _Label_ can be attached to. The STACKIT _Resource Manager_ provides CRUD endpoints to query and to modify the state.  ### Organizations STACKIT organizations are the base element to create and to use cloud-resources. An organization is bound to one customer account. Organizations have a lifecycle. - Organizations are always the root node in resource hierarchy and do not have a parent  ### Projects STACKIT projects are needed to use cloud-resources. Projects serve as wrapper for underlying technical structures and processes. Projects have a lifecycle. Projects compared to folders may have different policies. - Projects are optional, but mandatory for cloud-resource usage - A project can be created having either an organization, or a folder as parent - A project must not have a project as parent - Project names under the same parent must not be unique - Root organization cannot be changed  ### Label STACKIT labels are key-value pairs including a resource container reference. Labels can be defined and attached freely to resource containers by which resources can be organized and queried. - Policy-based, immutable labels may exists

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resourcemanager

import (
	"encoding/json"
	"time"
)

// checks if the FolderResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FolderResponse{}

/*
	types and functions for containerId
*/

// isNotNullableString
type FolderResponseGetContainerIdAttributeType = *string

func getFolderResponseGetContainerIdAttributeTypeOk(arg FolderResponseGetContainerIdAttributeType) (ret FolderResponseGetContainerIdRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setFolderResponseGetContainerIdAttributeType(arg *FolderResponseGetContainerIdAttributeType, val FolderResponseGetContainerIdRetType) {
	*arg = &val
}

type FolderResponseGetContainerIdArgType = string
type FolderResponseGetContainerIdRetType = string

/*
	types and functions for creationTime
*/

// isDateTime
type FolderResponseGetCreationTimeAttributeType = *time.Time
type FolderResponseGetCreationTimeArgType = time.Time
type FolderResponseGetCreationTimeRetType = time.Time

func getFolderResponseGetCreationTimeAttributeTypeOk(arg FolderResponseGetCreationTimeAttributeType) (ret FolderResponseGetCreationTimeRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setFolderResponseGetCreationTimeAttributeType(arg *FolderResponseGetCreationTimeAttributeType, val FolderResponseGetCreationTimeRetType) {
	*arg = &val
}

/*
	types and functions for folderId
*/

// isNotNullableString
type FolderResponseGetFolderIdAttributeType = *string

func getFolderResponseGetFolderIdAttributeTypeOk(arg FolderResponseGetFolderIdAttributeType) (ret FolderResponseGetFolderIdRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setFolderResponseGetFolderIdAttributeType(arg *FolderResponseGetFolderIdAttributeType, val FolderResponseGetFolderIdRetType) {
	*arg = &val
}

type FolderResponseGetFolderIdArgType = string
type FolderResponseGetFolderIdRetType = string

/*
	types and functions for labels
*/

// isContainer
type FolderResponseGetLabelsAttributeType = *map[string]string
type FolderResponseGetLabelsArgType = map[string]string
type FolderResponseGetLabelsRetType = map[string]string

func getFolderResponseGetLabelsAttributeTypeOk(arg FolderResponseGetLabelsAttributeType) (ret FolderResponseGetLabelsRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setFolderResponseGetLabelsAttributeType(arg *FolderResponseGetLabelsAttributeType, val FolderResponseGetLabelsRetType) {
	*arg = &val
}

/*
	types and functions for name
*/

// isNotNullableString
type FolderResponseGetNameAttributeType = *string

func getFolderResponseGetNameAttributeTypeOk(arg FolderResponseGetNameAttributeType) (ret FolderResponseGetNameRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setFolderResponseGetNameAttributeType(arg *FolderResponseGetNameAttributeType, val FolderResponseGetNameRetType) {
	*arg = &val
}

type FolderResponseGetNameArgType = string
type FolderResponseGetNameRetType = string

/*
	types and functions for parent
*/

// isModel
type FolderResponseGetParentAttributeType = *Parent
type FolderResponseGetParentArgType = Parent
type FolderResponseGetParentRetType = Parent

func getFolderResponseGetParentAttributeTypeOk(arg FolderResponseGetParentAttributeType) (ret FolderResponseGetParentRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setFolderResponseGetParentAttributeType(arg *FolderResponseGetParentAttributeType, val FolderResponseGetParentRetType) {
	*arg = &val
}

/*
	types and functions for updateTime
*/

// isDateTime
type FolderResponseGetUpdateTimeAttributeType = *time.Time
type FolderResponseGetUpdateTimeArgType = time.Time
type FolderResponseGetUpdateTimeRetType = time.Time

func getFolderResponseGetUpdateTimeAttributeTypeOk(arg FolderResponseGetUpdateTimeAttributeType) (ret FolderResponseGetUpdateTimeRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setFolderResponseGetUpdateTimeAttributeType(arg *FolderResponseGetUpdateTimeAttributeType, val FolderResponseGetUpdateTimeRetType) {
	*arg = &val
}

// FolderResponse struct for FolderResponse
type FolderResponse struct {
	// Globally unique, user-friendly identifier.
	// REQUIRED
	ContainerId FolderResponseGetContainerIdAttributeType `json:"containerId" required:"true"`
	// Timestamp at which the folder was created.
	// REQUIRED
	CreationTime FolderResponseGetCreationTimeAttributeType `json:"creationTime" required:"true"`
	// Globally unique folder identifier.
	// REQUIRED
	FolderId FolderResponseGetFolderIdAttributeType `json:"folderId" required:"true"`
	// Labels are key-value string pairs that can be attached to a resource container. Some labels may be enforced via policies.  - A label key must match the regex `[A-ZÄÜÖa-zäüöß0-9_-]{1,64}`. - A label value must match the regex `^$|[A-ZÄÜÖa-zäüöß0-9_-]{1,64}`.
	Labels FolderResponseGetLabelsAttributeType `json:"labels,omitempty"`
	// Folder name.
	// REQUIRED
	Name FolderResponseGetNameAttributeType `json:"name" required:"true"`
	// REQUIRED
	Parent FolderResponseGetParentAttributeType `json:"parent" required:"true"`
	// Timestamp at which the folder was last modified.
	// REQUIRED
	UpdateTime FolderResponseGetUpdateTimeAttributeType `json:"updateTime" required:"true"`
}

type _FolderResponse FolderResponse

// NewFolderResponse instantiates a new FolderResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFolderResponse(containerId FolderResponseGetContainerIdArgType, creationTime FolderResponseGetCreationTimeArgType, folderId FolderResponseGetFolderIdArgType, name FolderResponseGetNameArgType, parent FolderResponseGetParentArgType, updateTime FolderResponseGetUpdateTimeArgType) *FolderResponse {
	this := FolderResponse{}
	setFolderResponseGetContainerIdAttributeType(&this.ContainerId, containerId)
	setFolderResponseGetCreationTimeAttributeType(&this.CreationTime, creationTime)
	setFolderResponseGetFolderIdAttributeType(&this.FolderId, folderId)
	setFolderResponseGetNameAttributeType(&this.Name, name)
	setFolderResponseGetParentAttributeType(&this.Parent, parent)
	setFolderResponseGetUpdateTimeAttributeType(&this.UpdateTime, updateTime)
	return &this
}

// NewFolderResponseWithDefaults instantiates a new FolderResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFolderResponseWithDefaults() *FolderResponse {
	this := FolderResponse{}
	return &this
}

// GetContainerId returns the ContainerId field value
func (o *FolderResponse) GetContainerId() (ret FolderResponseGetContainerIdRetType) {
	ret, _ = o.GetContainerIdOk()
	return ret
}

// GetContainerIdOk returns a tuple with the ContainerId field value
// and a boolean to check if the value has been set.
func (o *FolderResponse) GetContainerIdOk() (ret FolderResponseGetContainerIdRetType, ok bool) {
	return getFolderResponseGetContainerIdAttributeTypeOk(o.ContainerId)
}

// SetContainerId sets field value
func (o *FolderResponse) SetContainerId(v FolderResponseGetContainerIdRetType) {
	setFolderResponseGetContainerIdAttributeType(&o.ContainerId, v)
}

// GetCreationTime returns the CreationTime field value
func (o *FolderResponse) GetCreationTime() (ret FolderResponseGetCreationTimeRetType) {
	ret, _ = o.GetCreationTimeOk()
	return ret
}

// GetCreationTimeOk returns a tuple with the CreationTime field value
// and a boolean to check if the value has been set.
func (o *FolderResponse) GetCreationTimeOk() (ret FolderResponseGetCreationTimeRetType, ok bool) {
	return getFolderResponseGetCreationTimeAttributeTypeOk(o.CreationTime)
}

// SetCreationTime sets field value
func (o *FolderResponse) SetCreationTime(v FolderResponseGetCreationTimeRetType) {
	setFolderResponseGetCreationTimeAttributeType(&o.CreationTime, v)
}

// GetFolderId returns the FolderId field value
func (o *FolderResponse) GetFolderId() (ret FolderResponseGetFolderIdRetType) {
	ret, _ = o.GetFolderIdOk()
	return ret
}

// GetFolderIdOk returns a tuple with the FolderId field value
// and a boolean to check if the value has been set.
func (o *FolderResponse) GetFolderIdOk() (ret FolderResponseGetFolderIdRetType, ok bool) {
	return getFolderResponseGetFolderIdAttributeTypeOk(o.FolderId)
}

// SetFolderId sets field value
func (o *FolderResponse) SetFolderId(v FolderResponseGetFolderIdRetType) {
	setFolderResponseGetFolderIdAttributeType(&o.FolderId, v)
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *FolderResponse) GetLabels() (res FolderResponseGetLabelsRetType) {
	res, _ = o.GetLabelsOk()
	return
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FolderResponse) GetLabelsOk() (ret FolderResponseGetLabelsRetType, ok bool) {
	return getFolderResponseGetLabelsAttributeTypeOk(o.Labels)
}

// HasLabels returns a boolean if a field has been set.
func (o *FolderResponse) HasLabels() bool {
	_, ok := o.GetLabelsOk()
	return ok
}

// SetLabels gets a reference to the given map[string]string and assigns it to the Labels field.
func (o *FolderResponse) SetLabels(v FolderResponseGetLabelsRetType) {
	setFolderResponseGetLabelsAttributeType(&o.Labels, v)
}

// GetName returns the Name field value
func (o *FolderResponse) GetName() (ret FolderResponseGetNameRetType) {
	ret, _ = o.GetNameOk()
	return ret
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FolderResponse) GetNameOk() (ret FolderResponseGetNameRetType, ok bool) {
	return getFolderResponseGetNameAttributeTypeOk(o.Name)
}

// SetName sets field value
func (o *FolderResponse) SetName(v FolderResponseGetNameRetType) {
	setFolderResponseGetNameAttributeType(&o.Name, v)
}

// GetParent returns the Parent field value
func (o *FolderResponse) GetParent() (ret FolderResponseGetParentRetType) {
	ret, _ = o.GetParentOk()
	return ret
}

// GetParentOk returns a tuple with the Parent field value
// and a boolean to check if the value has been set.
func (o *FolderResponse) GetParentOk() (ret FolderResponseGetParentRetType, ok bool) {
	return getFolderResponseGetParentAttributeTypeOk(o.Parent)
}

// SetParent sets field value
func (o *FolderResponse) SetParent(v FolderResponseGetParentRetType) {
	setFolderResponseGetParentAttributeType(&o.Parent, v)
}

// GetUpdateTime returns the UpdateTime field value
func (o *FolderResponse) GetUpdateTime() (ret FolderResponseGetUpdateTimeRetType) {
	ret, _ = o.GetUpdateTimeOk()
	return ret
}

// GetUpdateTimeOk returns a tuple with the UpdateTime field value
// and a boolean to check if the value has been set.
func (o *FolderResponse) GetUpdateTimeOk() (ret FolderResponseGetUpdateTimeRetType, ok bool) {
	return getFolderResponseGetUpdateTimeAttributeTypeOk(o.UpdateTime)
}

// SetUpdateTime sets field value
func (o *FolderResponse) SetUpdateTime(v FolderResponseGetUpdateTimeRetType) {
	setFolderResponseGetUpdateTimeAttributeType(&o.UpdateTime, v)
}

func (o FolderResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getFolderResponseGetContainerIdAttributeTypeOk(o.ContainerId); ok {
		toSerialize["ContainerId"] = val
	}
	if val, ok := getFolderResponseGetCreationTimeAttributeTypeOk(o.CreationTime); ok {
		toSerialize["CreationTime"] = val
	}
	if val, ok := getFolderResponseGetFolderIdAttributeTypeOk(o.FolderId); ok {
		toSerialize["FolderId"] = val
	}
	if val, ok := getFolderResponseGetLabelsAttributeTypeOk(o.Labels); ok {
		toSerialize["Labels"] = val
	}
	if val, ok := getFolderResponseGetNameAttributeTypeOk(o.Name); ok {
		toSerialize["Name"] = val
	}
	if val, ok := getFolderResponseGetParentAttributeTypeOk(o.Parent); ok {
		toSerialize["Parent"] = val
	}
	if val, ok := getFolderResponseGetUpdateTimeAttributeTypeOk(o.UpdateTime); ok {
		toSerialize["UpdateTime"] = val
	}
	return toSerialize, nil
}

type NullableFolderResponse struct {
	value *FolderResponse
	isSet bool
}

func (v NullableFolderResponse) Get() *FolderResponse {
	return v.value
}

func (v *NullableFolderResponse) Set(val *FolderResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableFolderResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableFolderResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFolderResponse(val *FolderResponse) *NullableFolderResponse {
	return &NullableFolderResponse{value: val, isSet: true}
}

func (v NullableFolderResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFolderResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
