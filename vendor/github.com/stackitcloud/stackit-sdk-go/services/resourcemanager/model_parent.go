/*
Resource Manager API

API v2 to manage resource containers - organizations, folders, projects incl. labels  ### Resource Management STACKIT resource management handles the terms _Organization_, _Folder_, _Project_, _Label_, and the hierarchical structure between them. Technically, organizations,  folders, and projects are _Resource Containers_ to which a _Label_ can be attached to. The STACKIT _Resource Manager_ provides CRUD endpoints to query and to modify the state.  ### Organizations STACKIT organizations are the base element to create and to use cloud-resources. An organization is bound to one customer account. Organizations have a lifecycle. - Organizations are always the root node in resource hierarchy and do not have a parent  ### Projects STACKIT projects are needed to use cloud-resources. Projects serve as wrapper for underlying technical structures and processes. Projects have a lifecycle. Projects compared to folders may have different policies. - Projects are optional, but mandatory for cloud-resource usage - A project can be created having either an organization, or a folder as parent - A project must not have a project as parent - Project names under the same parent must not be unique - Root organization cannot be changed  ### Label STACKIT labels are key-value pairs including a resource container reference. Labels can be defined and attached freely to resource containers by which resources can be organized and queried. - Policy-based, immutable labels may exists

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resourcemanager

import (
	"encoding/json"
	"fmt"
)

// checks if the Parent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Parent{}

/*
	types and functions for containerId
*/

// isNotNullableString
type ParentGetContainerIdAttributeType = *string

func getParentGetContainerIdAttributeTypeOk(arg ParentGetContainerIdAttributeType) (ret ParentGetContainerIdRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setParentGetContainerIdAttributeType(arg *ParentGetContainerIdAttributeType, val ParentGetContainerIdRetType) {
	*arg = &val
}

type ParentGetContainerIdArgType = string
type ParentGetContainerIdRetType = string

/*
	types and functions for id
*/

// isNotNullableString
type ParentGetIdAttributeType = *string

func getParentGetIdAttributeTypeOk(arg ParentGetIdAttributeType) (ret ParentGetIdRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setParentGetIdAttributeType(arg *ParentGetIdAttributeType, val ParentGetIdRetType) {
	*arg = &val
}

type ParentGetIdArgType = string
type ParentGetIdRetType = string

/*
	types and functions for type
*/

// isEnum

// ParentTypes Container type of parent container.
// value type for enums
type ParentTypes string

// List of Type
const (
	PARENTTYPE_ORGANIZATION ParentTypes = "ORGANIZATION"
	PARENTTYPE_FOLDER       ParentTypes = "FOLDER"
)

// All allowed values of Parent enum
var AllowedParentTypesEnumValues = []ParentTypes{
	"ORGANIZATION",
	"FOLDER",
}

func (v *ParentTypes) UnmarshalJSON(src []byte) error {
	// use a type alias to prevent infinite recursion during unmarshal,
	// see https://biscuit.ninja/posts/go-avoid-an-infitine-loop-with-custom-json-unmarshallers
	type TmpJson ParentTypes
	var value TmpJson
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	// Allow unmarshalling zero value for testing purposes
	var zeroValue TmpJson
	if value == zeroValue {
		return nil
	}
	enumTypeValue := ParentTypes(value)
	for _, existing := range AllowedParentTypesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Parent", value)
}

// NewParentTypesFromValue returns a pointer to a valid ParentTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewParentTypesFromValue(v ParentTypes) (*ParentTypes, error) {
	ev := ParentTypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ParentTypes: valid values are %v", v, AllowedParentTypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ParentTypes) IsValid() bool {
	for _, existing := range AllowedParentTypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TypeTypes value
func (v ParentTypes) Ptr() *ParentTypes {
	return &v
}

type NullableParentTypes struct {
	value *ParentTypes
	isSet bool
}

func (v NullableParentTypes) Get() *ParentTypes {
	return v.value
}

func (v *NullableParentTypes) Set(val *ParentTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableParentTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableParentTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParentTypes(val *ParentTypes) *NullableParentTypes {
	return &NullableParentTypes{value: val, isSet: true}
}

func (v NullableParentTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParentTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

type ParentGetTypeAttributeType = *ParentTypes
type ParentGetTypeArgType = ParentTypes
type ParentGetTypeRetType = ParentTypes

func getParentGetTypeAttributeTypeOk(arg ParentGetTypeAttributeType) (ret ParentGetTypeRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setParentGetTypeAttributeType(arg *ParentGetTypeAttributeType, val ParentGetTypeRetType) {
	*arg = &val
}

// Parent Parent container.
type Parent struct {
	// User-friendly identifier of either organization or folder (will replace id).
	// REQUIRED
	ContainerId ParentGetContainerIdAttributeType `json:"containerId" required:"true"`
	// Identifier of either organization or folder.
	// REQUIRED
	Id ParentGetIdAttributeType `json:"id" required:"true"`
	// Container type of parent container.
	// REQUIRED
	Type ParentGetTypeAttributeType `json:"type" required:"true"`
}

type _Parent Parent

// NewParent instantiates a new Parent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParent(containerId ParentGetContainerIdArgType, id ParentGetIdArgType, types ParentGetTypeArgType) *Parent {
	this := Parent{}
	setParentGetContainerIdAttributeType(&this.ContainerId, containerId)
	setParentGetIdAttributeType(&this.Id, id)
	setParentGetTypeAttributeType(&this.Type, types)
	return &this
}

// NewParentWithDefaults instantiates a new Parent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParentWithDefaults() *Parent {
	this := Parent{}
	return &this
}

// GetContainerId returns the ContainerId field value
func (o *Parent) GetContainerId() (ret ParentGetContainerIdRetType) {
	ret, _ = o.GetContainerIdOk()
	return ret
}

// GetContainerIdOk returns a tuple with the ContainerId field value
// and a boolean to check if the value has been set.
func (o *Parent) GetContainerIdOk() (ret ParentGetContainerIdRetType, ok bool) {
	return getParentGetContainerIdAttributeTypeOk(o.ContainerId)
}

// SetContainerId sets field value
func (o *Parent) SetContainerId(v ParentGetContainerIdRetType) {
	setParentGetContainerIdAttributeType(&o.ContainerId, v)
}

// GetId returns the Id field value
func (o *Parent) GetId() (ret ParentGetIdRetType) {
	ret, _ = o.GetIdOk()
	return ret
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Parent) GetIdOk() (ret ParentGetIdRetType, ok bool) {
	return getParentGetIdAttributeTypeOk(o.Id)
}

// SetId sets field value
func (o *Parent) SetId(v ParentGetIdRetType) {
	setParentGetIdAttributeType(&o.Id, v)
}

// GetType returns the Type field value
func (o *Parent) GetType() (ret ParentGetTypeRetType) {
	ret, _ = o.GetTypeOk()
	return ret
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Parent) GetTypeOk() (ret ParentGetTypeRetType, ok bool) {
	return getParentGetTypeAttributeTypeOk(o.Type)
}

// SetType sets field value
func (o *Parent) SetType(v ParentGetTypeRetType) {
	setParentGetTypeAttributeType(&o.Type, v)
}

func (o Parent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getParentGetContainerIdAttributeTypeOk(o.ContainerId); ok {
		toSerialize["ContainerId"] = val
	}
	if val, ok := getParentGetIdAttributeTypeOk(o.Id); ok {
		toSerialize["Id"] = val
	}
	if val, ok := getParentGetTypeAttributeTypeOk(o.Type); ok {
		toSerialize["Type"] = val
	}
	return toSerialize, nil
}

type NullableParent struct {
	value *Parent
	isSet bool
}

func (v NullableParent) Get() *Parent {
	return v.value
}

func (v *NullableParent) Set(val *Parent) {
	v.value = val
	v.isSet = true
}

func (v NullableParent) IsSet() bool {
	return v.isSet
}

func (v *NullableParent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParent(val *Parent) *NullableParent {
	return &NullableParent{value: val, isSet: true}
}

func (v NullableParent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
