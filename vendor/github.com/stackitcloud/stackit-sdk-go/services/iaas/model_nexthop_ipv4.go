/*
IaaS-API

This API allows you to create and modify IaaS resources.

API version: 2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iaas

import (
	"encoding/json"
)

// checks if the NexthopIPv4 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NexthopIPv4{}

/*
	types and functions for type
*/

// isNotNullableString
type NexthopIPv4GetTypeAttributeType = *string

func getNexthopIPv4GetTypeAttributeTypeOk(arg NexthopIPv4GetTypeAttributeType) (ret NexthopIPv4GetTypeRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setNexthopIPv4GetTypeAttributeType(arg *NexthopIPv4GetTypeAttributeType, val NexthopIPv4GetTypeRetType) {
	*arg = &val
}

type NexthopIPv4GetTypeArgType = string
type NexthopIPv4GetTypeRetType = string

/*
	types and functions for value
*/

// isNotNullableString
type NexthopIPv4GetValueAttributeType = *string

func getNexthopIPv4GetValueAttributeTypeOk(arg NexthopIPv4GetValueAttributeType) (ret NexthopIPv4GetValueRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setNexthopIPv4GetValueAttributeType(arg *NexthopIPv4GetValueAttributeType, val NexthopIPv4GetValueRetType) {
	*arg = &val
}

type NexthopIPv4GetValueArgType = string
type NexthopIPv4GetValueRetType = string

// NexthopIPv4 Object that represents an IPv4 address.
type NexthopIPv4 struct {
	// REQUIRED
	Type NexthopIPv4GetTypeAttributeType `json:"type" required:"true"`
	// An IPv4 address.
	// REQUIRED
	Value NexthopIPv4GetValueAttributeType `json:"value" required:"true"`
}

type _NexthopIPv4 NexthopIPv4

// NewNexthopIPv4 instantiates a new NexthopIPv4 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNexthopIPv4(types NexthopIPv4GetTypeArgType, value NexthopIPv4GetValueArgType) *NexthopIPv4 {
	this := NexthopIPv4{}
	setNexthopIPv4GetTypeAttributeType(&this.Type, types)
	setNexthopIPv4GetValueAttributeType(&this.Value, value)
	return &this
}

// NewNexthopIPv4WithDefaults instantiates a new NexthopIPv4 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNexthopIPv4WithDefaults() *NexthopIPv4 {
	this := NexthopIPv4{}
	return &this
}

// GetType returns the Type field value
func (o *NexthopIPv4) GetType() (ret NexthopIPv4GetTypeRetType) {
	ret, _ = o.GetTypeOk()
	return ret
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *NexthopIPv4) GetTypeOk() (ret NexthopIPv4GetTypeRetType, ok bool) {
	return getNexthopIPv4GetTypeAttributeTypeOk(o.Type)
}

// SetType sets field value
func (o *NexthopIPv4) SetType(v NexthopIPv4GetTypeRetType) {
	setNexthopIPv4GetTypeAttributeType(&o.Type, v)
}

// GetValue returns the Value field value
func (o *NexthopIPv4) GetValue() (ret NexthopIPv4GetValueRetType) {
	ret, _ = o.GetValueOk()
	return ret
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *NexthopIPv4) GetValueOk() (ret NexthopIPv4GetValueRetType, ok bool) {
	return getNexthopIPv4GetValueAttributeTypeOk(o.Value)
}

// SetValue sets field value
func (o *NexthopIPv4) SetValue(v NexthopIPv4GetValueRetType) {
	setNexthopIPv4GetValueAttributeType(&o.Value, v)
}

func (o NexthopIPv4) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getNexthopIPv4GetTypeAttributeTypeOk(o.Type); ok {
		toSerialize["Type"] = val
	}
	if val, ok := getNexthopIPv4GetValueAttributeTypeOk(o.Value); ok {
		toSerialize["Value"] = val
	}
	return toSerialize, nil
}

type NullableNexthopIPv4 struct {
	value *NexthopIPv4
	isSet bool
}

func (v NullableNexthopIPv4) Get() *NexthopIPv4 {
	return v.value
}

func (v *NullableNexthopIPv4) Set(val *NexthopIPv4) {
	v.value = val
	v.isSet = true
}

func (v NullableNexthopIPv4) IsSet() bool {
	return v.isSet
}

func (v *NullableNexthopIPv4) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNexthopIPv4(val *NexthopIPv4) *NullableNexthopIPv4 {
	return &NullableNexthopIPv4{value: val, isSet: true}
}

func (v NullableNexthopIPv4) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNexthopIPv4) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
