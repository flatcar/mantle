/*
IaaS-API

This API allows you to create and modify IaaS resources.

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iaas

import (
	"encoding/json"
)

// checks if the AreaPrefixConfigIPv4 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AreaPrefixConfigIPv4{}

/*
	types and functions for defaultPrefixLen
*/

// isInteger
type AreaPrefixConfigIPv4GetDefaultPrefixLenAttributeType = *int64
type AreaPrefixConfigIPv4GetDefaultPrefixLenArgType = int64
type AreaPrefixConfigIPv4GetDefaultPrefixLenRetType = int64

func getAreaPrefixConfigIPv4GetDefaultPrefixLenAttributeTypeOk(arg AreaPrefixConfigIPv4GetDefaultPrefixLenAttributeType) (ret AreaPrefixConfigIPv4GetDefaultPrefixLenRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setAreaPrefixConfigIPv4GetDefaultPrefixLenAttributeType(arg *AreaPrefixConfigIPv4GetDefaultPrefixLenAttributeType, val AreaPrefixConfigIPv4GetDefaultPrefixLenRetType) {
	*arg = &val
}

/*
	types and functions for maxPrefixLen
*/

// isInteger
type AreaPrefixConfigIPv4GetMaxPrefixLenAttributeType = *int64
type AreaPrefixConfigIPv4GetMaxPrefixLenArgType = int64
type AreaPrefixConfigIPv4GetMaxPrefixLenRetType = int64

func getAreaPrefixConfigIPv4GetMaxPrefixLenAttributeTypeOk(arg AreaPrefixConfigIPv4GetMaxPrefixLenAttributeType) (ret AreaPrefixConfigIPv4GetMaxPrefixLenRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setAreaPrefixConfigIPv4GetMaxPrefixLenAttributeType(arg *AreaPrefixConfigIPv4GetMaxPrefixLenAttributeType, val AreaPrefixConfigIPv4GetMaxPrefixLenRetType) {
	*arg = &val
}

/*
	types and functions for minPrefixLen
*/

// isInteger
type AreaPrefixConfigIPv4GetMinPrefixLenAttributeType = *int64
type AreaPrefixConfigIPv4GetMinPrefixLenArgType = int64
type AreaPrefixConfigIPv4GetMinPrefixLenRetType = int64

func getAreaPrefixConfigIPv4GetMinPrefixLenAttributeTypeOk(arg AreaPrefixConfigIPv4GetMinPrefixLenAttributeType) (ret AreaPrefixConfigIPv4GetMinPrefixLenRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setAreaPrefixConfigIPv4GetMinPrefixLenAttributeType(arg *AreaPrefixConfigIPv4GetMinPrefixLenAttributeType, val AreaPrefixConfigIPv4GetMinPrefixLenRetType) {
	*arg = &val
}

// AreaPrefixConfigIPv4 The IPv4 prefix config for a network area.
type AreaPrefixConfigIPv4 struct {
	// The default prefix length for networks in the network area.
	DefaultPrefixLen AreaPrefixConfigIPv4GetDefaultPrefixLenAttributeType `json:"defaultPrefixLen,omitempty"`
	// The maximal prefix length for networks in the network area.
	MaxPrefixLen AreaPrefixConfigIPv4GetMaxPrefixLenAttributeType `json:"maxPrefixLen,omitempty"`
	// The minimal prefix length for networks in the network area.
	MinPrefixLen AreaPrefixConfigIPv4GetMinPrefixLenAttributeType `json:"minPrefixLen,omitempty"`
}

// NewAreaPrefixConfigIPv4 instantiates a new AreaPrefixConfigIPv4 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAreaPrefixConfigIPv4() *AreaPrefixConfigIPv4 {
	this := AreaPrefixConfigIPv4{}
	return &this
}

// NewAreaPrefixConfigIPv4WithDefaults instantiates a new AreaPrefixConfigIPv4 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAreaPrefixConfigIPv4WithDefaults() *AreaPrefixConfigIPv4 {
	this := AreaPrefixConfigIPv4{}
	var defaultPrefixLen int64 = 25
	this.DefaultPrefixLen = &defaultPrefixLen
	var maxPrefixLen int64 = 29
	this.MaxPrefixLen = &maxPrefixLen
	var minPrefixLen int64 = 24
	this.MinPrefixLen = &minPrefixLen
	return &this
}

// GetDefaultPrefixLen returns the DefaultPrefixLen field value if set, zero value otherwise.
func (o *AreaPrefixConfigIPv4) GetDefaultPrefixLen() (res AreaPrefixConfigIPv4GetDefaultPrefixLenRetType) {
	res, _ = o.GetDefaultPrefixLenOk()
	return
}

// GetDefaultPrefixLenOk returns a tuple with the DefaultPrefixLen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AreaPrefixConfigIPv4) GetDefaultPrefixLenOk() (ret AreaPrefixConfigIPv4GetDefaultPrefixLenRetType, ok bool) {
	return getAreaPrefixConfigIPv4GetDefaultPrefixLenAttributeTypeOk(o.DefaultPrefixLen)
}

// HasDefaultPrefixLen returns a boolean if a field has been set.
func (o *AreaPrefixConfigIPv4) HasDefaultPrefixLen() bool {
	_, ok := o.GetDefaultPrefixLenOk()
	return ok
}

// SetDefaultPrefixLen gets a reference to the given int64 and assigns it to the DefaultPrefixLen field.
func (o *AreaPrefixConfigIPv4) SetDefaultPrefixLen(v AreaPrefixConfigIPv4GetDefaultPrefixLenRetType) {
	setAreaPrefixConfigIPv4GetDefaultPrefixLenAttributeType(&o.DefaultPrefixLen, v)
}

// GetMaxPrefixLen returns the MaxPrefixLen field value if set, zero value otherwise.
func (o *AreaPrefixConfigIPv4) GetMaxPrefixLen() (res AreaPrefixConfigIPv4GetMaxPrefixLenRetType) {
	res, _ = o.GetMaxPrefixLenOk()
	return
}

// GetMaxPrefixLenOk returns a tuple with the MaxPrefixLen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AreaPrefixConfigIPv4) GetMaxPrefixLenOk() (ret AreaPrefixConfigIPv4GetMaxPrefixLenRetType, ok bool) {
	return getAreaPrefixConfigIPv4GetMaxPrefixLenAttributeTypeOk(o.MaxPrefixLen)
}

// HasMaxPrefixLen returns a boolean if a field has been set.
func (o *AreaPrefixConfigIPv4) HasMaxPrefixLen() bool {
	_, ok := o.GetMaxPrefixLenOk()
	return ok
}

// SetMaxPrefixLen gets a reference to the given int64 and assigns it to the MaxPrefixLen field.
func (o *AreaPrefixConfigIPv4) SetMaxPrefixLen(v AreaPrefixConfigIPv4GetMaxPrefixLenRetType) {
	setAreaPrefixConfigIPv4GetMaxPrefixLenAttributeType(&o.MaxPrefixLen, v)
}

// GetMinPrefixLen returns the MinPrefixLen field value if set, zero value otherwise.
func (o *AreaPrefixConfigIPv4) GetMinPrefixLen() (res AreaPrefixConfigIPv4GetMinPrefixLenRetType) {
	res, _ = o.GetMinPrefixLenOk()
	return
}

// GetMinPrefixLenOk returns a tuple with the MinPrefixLen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AreaPrefixConfigIPv4) GetMinPrefixLenOk() (ret AreaPrefixConfigIPv4GetMinPrefixLenRetType, ok bool) {
	return getAreaPrefixConfigIPv4GetMinPrefixLenAttributeTypeOk(o.MinPrefixLen)
}

// HasMinPrefixLen returns a boolean if a field has been set.
func (o *AreaPrefixConfigIPv4) HasMinPrefixLen() bool {
	_, ok := o.GetMinPrefixLenOk()
	return ok
}

// SetMinPrefixLen gets a reference to the given int64 and assigns it to the MinPrefixLen field.
func (o *AreaPrefixConfigIPv4) SetMinPrefixLen(v AreaPrefixConfigIPv4GetMinPrefixLenRetType) {
	setAreaPrefixConfigIPv4GetMinPrefixLenAttributeType(&o.MinPrefixLen, v)
}

func (o AreaPrefixConfigIPv4) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getAreaPrefixConfigIPv4GetDefaultPrefixLenAttributeTypeOk(o.DefaultPrefixLen); ok {
		toSerialize["DefaultPrefixLen"] = val
	}
	if val, ok := getAreaPrefixConfigIPv4GetMaxPrefixLenAttributeTypeOk(o.MaxPrefixLen); ok {
		toSerialize["MaxPrefixLen"] = val
	}
	if val, ok := getAreaPrefixConfigIPv4GetMinPrefixLenAttributeTypeOk(o.MinPrefixLen); ok {
		toSerialize["MinPrefixLen"] = val
	}
	return toSerialize, nil
}

type NullableAreaPrefixConfigIPv4 struct {
	value *AreaPrefixConfigIPv4
	isSet bool
}

func (v NullableAreaPrefixConfigIPv4) Get() *AreaPrefixConfigIPv4 {
	return v.value
}

func (v *NullableAreaPrefixConfigIPv4) Set(val *AreaPrefixConfigIPv4) {
	v.value = val
	v.isSet = true
}

func (v NullableAreaPrefixConfigIPv4) IsSet() bool {
	return v.isSet
}

func (v *NullableAreaPrefixConfigIPv4) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAreaPrefixConfigIPv4(val *AreaPrefixConfigIPv4) *NullableAreaPrefixConfigIPv4 {
	return &NullableAreaPrefixConfigIPv4{value: val, isSet: true}
}

func (v NullableAreaPrefixConfigIPv4) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAreaPrefixConfigIPv4) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
