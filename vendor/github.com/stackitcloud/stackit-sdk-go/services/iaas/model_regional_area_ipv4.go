/*
IaaS-API

This API allows you to create and modify IaaS resources.

API version: 2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iaas

import (
	"encoding/json"
)

// checks if the RegionalAreaIPv4 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegionalAreaIPv4{}

/*
	types and functions for defaultNameservers
*/

// isArray
type RegionalAreaIPv4GetDefaultNameserversAttributeType = *[]string
type RegionalAreaIPv4GetDefaultNameserversArgType = []string
type RegionalAreaIPv4GetDefaultNameserversRetType = []string

func getRegionalAreaIPv4GetDefaultNameserversAttributeTypeOk(arg RegionalAreaIPv4GetDefaultNameserversAttributeType) (ret RegionalAreaIPv4GetDefaultNameserversRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setRegionalAreaIPv4GetDefaultNameserversAttributeType(arg *RegionalAreaIPv4GetDefaultNameserversAttributeType, val RegionalAreaIPv4GetDefaultNameserversRetType) {
	*arg = &val
}

/*
	types and functions for defaultPrefixLen
*/

// isLong
type RegionalAreaIPv4GetDefaultPrefixLenAttributeType = *int64
type RegionalAreaIPv4GetDefaultPrefixLenArgType = int64
type RegionalAreaIPv4GetDefaultPrefixLenRetType = int64

func getRegionalAreaIPv4GetDefaultPrefixLenAttributeTypeOk(arg RegionalAreaIPv4GetDefaultPrefixLenAttributeType) (ret RegionalAreaIPv4GetDefaultPrefixLenRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setRegionalAreaIPv4GetDefaultPrefixLenAttributeType(arg *RegionalAreaIPv4GetDefaultPrefixLenAttributeType, val RegionalAreaIPv4GetDefaultPrefixLenRetType) {
	*arg = &val
}

/*
	types and functions for maxPrefixLen
*/

// isLong
type RegionalAreaIPv4GetMaxPrefixLenAttributeType = *int64
type RegionalAreaIPv4GetMaxPrefixLenArgType = int64
type RegionalAreaIPv4GetMaxPrefixLenRetType = int64

func getRegionalAreaIPv4GetMaxPrefixLenAttributeTypeOk(arg RegionalAreaIPv4GetMaxPrefixLenAttributeType) (ret RegionalAreaIPv4GetMaxPrefixLenRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setRegionalAreaIPv4GetMaxPrefixLenAttributeType(arg *RegionalAreaIPv4GetMaxPrefixLenAttributeType, val RegionalAreaIPv4GetMaxPrefixLenRetType) {
	*arg = &val
}

/*
	types and functions for minPrefixLen
*/

// isLong
type RegionalAreaIPv4GetMinPrefixLenAttributeType = *int64
type RegionalAreaIPv4GetMinPrefixLenArgType = int64
type RegionalAreaIPv4GetMinPrefixLenRetType = int64

func getRegionalAreaIPv4GetMinPrefixLenAttributeTypeOk(arg RegionalAreaIPv4GetMinPrefixLenAttributeType) (ret RegionalAreaIPv4GetMinPrefixLenRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setRegionalAreaIPv4GetMinPrefixLenAttributeType(arg *RegionalAreaIPv4GetMinPrefixLenAttributeType, val RegionalAreaIPv4GetMinPrefixLenRetType) {
	*arg = &val
}

/*
	types and functions for networkRanges
*/

// isArray
type RegionalAreaIPv4GetNetworkRangesAttributeType = *[]NetworkRange
type RegionalAreaIPv4GetNetworkRangesArgType = []NetworkRange
type RegionalAreaIPv4GetNetworkRangesRetType = []NetworkRange

func getRegionalAreaIPv4GetNetworkRangesAttributeTypeOk(arg RegionalAreaIPv4GetNetworkRangesAttributeType) (ret RegionalAreaIPv4GetNetworkRangesRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setRegionalAreaIPv4GetNetworkRangesAttributeType(arg *RegionalAreaIPv4GetNetworkRangesAttributeType, val RegionalAreaIPv4GetNetworkRangesRetType) {
	*arg = &val
}

/*
	types and functions for transferNetwork
*/

// isNotNullableString
type RegionalAreaIPv4GetTransferNetworkAttributeType = *string

func getRegionalAreaIPv4GetTransferNetworkAttributeTypeOk(arg RegionalAreaIPv4GetTransferNetworkAttributeType) (ret RegionalAreaIPv4GetTransferNetworkRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setRegionalAreaIPv4GetTransferNetworkAttributeType(arg *RegionalAreaIPv4GetTransferNetworkAttributeType, val RegionalAreaIPv4GetTransferNetworkRetType) {
	*arg = &val
}

type RegionalAreaIPv4GetTransferNetworkArgType = string
type RegionalAreaIPv4GetTransferNetworkRetType = string

// RegionalAreaIPv4 The regional IPv4 config of a network area.
type RegionalAreaIPv4 struct {
	DefaultNameservers RegionalAreaIPv4GetDefaultNameserversAttributeType `json:"defaultNameservers,omitempty"`
	// The default prefix length for networks in the network area.
	// REQUIRED
	DefaultPrefixLen RegionalAreaIPv4GetDefaultPrefixLenAttributeType `json:"defaultPrefixLen" required:"true"`
	// The maximal prefix length for networks in the network area.
	// REQUIRED
	MaxPrefixLen RegionalAreaIPv4GetMaxPrefixLenAttributeType `json:"maxPrefixLen" required:"true"`
	// The minimal prefix length for networks in the network area.
	// REQUIRED
	MinPrefixLen RegionalAreaIPv4GetMinPrefixLenAttributeType `json:"minPrefixLen" required:"true"`
	// A list of network ranges.
	// REQUIRED
	NetworkRanges RegionalAreaIPv4GetNetworkRangesAttributeType `json:"networkRanges" required:"true"`
	// IPv4 Classless Inter-Domain Routing (CIDR).
	// REQUIRED
	TransferNetwork RegionalAreaIPv4GetTransferNetworkAttributeType `json:"transferNetwork" required:"true"`
}

type _RegionalAreaIPv4 RegionalAreaIPv4

// NewRegionalAreaIPv4 instantiates a new RegionalAreaIPv4 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegionalAreaIPv4(defaultPrefixLen RegionalAreaIPv4GetDefaultPrefixLenArgType, maxPrefixLen RegionalAreaIPv4GetMaxPrefixLenArgType, minPrefixLen RegionalAreaIPv4GetMinPrefixLenArgType, networkRanges RegionalAreaIPv4GetNetworkRangesArgType, transferNetwork RegionalAreaIPv4GetTransferNetworkArgType) *RegionalAreaIPv4 {
	this := RegionalAreaIPv4{}
	setRegionalAreaIPv4GetDefaultPrefixLenAttributeType(&this.DefaultPrefixLen, defaultPrefixLen)
	setRegionalAreaIPv4GetMaxPrefixLenAttributeType(&this.MaxPrefixLen, maxPrefixLen)
	setRegionalAreaIPv4GetMinPrefixLenAttributeType(&this.MinPrefixLen, minPrefixLen)
	setRegionalAreaIPv4GetNetworkRangesAttributeType(&this.NetworkRanges, networkRanges)
	setRegionalAreaIPv4GetTransferNetworkAttributeType(&this.TransferNetwork, transferNetwork)
	return &this
}

// NewRegionalAreaIPv4WithDefaults instantiates a new RegionalAreaIPv4 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegionalAreaIPv4WithDefaults() *RegionalAreaIPv4 {
	this := RegionalAreaIPv4{}
	var defaultPrefixLen int64 = 25
	this.DefaultPrefixLen = &defaultPrefixLen
	var maxPrefixLen int64 = 29
	this.MaxPrefixLen = &maxPrefixLen
	var minPrefixLen int64 = 24
	this.MinPrefixLen = &minPrefixLen
	return &this
}

// GetDefaultNameservers returns the DefaultNameservers field value if set, zero value otherwise.
func (o *RegionalAreaIPv4) GetDefaultNameservers() (res RegionalAreaIPv4GetDefaultNameserversRetType) {
	res, _ = o.GetDefaultNameserversOk()
	return
}

// GetDefaultNameserversOk returns a tuple with the DefaultNameservers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionalAreaIPv4) GetDefaultNameserversOk() (ret RegionalAreaIPv4GetDefaultNameserversRetType, ok bool) {
	return getRegionalAreaIPv4GetDefaultNameserversAttributeTypeOk(o.DefaultNameservers)
}

// HasDefaultNameservers returns a boolean if a field has been set.
func (o *RegionalAreaIPv4) HasDefaultNameservers() bool {
	_, ok := o.GetDefaultNameserversOk()
	return ok
}

// SetDefaultNameservers gets a reference to the given []string and assigns it to the DefaultNameservers field.
func (o *RegionalAreaIPv4) SetDefaultNameservers(v RegionalAreaIPv4GetDefaultNameserversRetType) {
	setRegionalAreaIPv4GetDefaultNameserversAttributeType(&o.DefaultNameservers, v)
}

// GetDefaultPrefixLen returns the DefaultPrefixLen field value
func (o *RegionalAreaIPv4) GetDefaultPrefixLen() (ret RegionalAreaIPv4GetDefaultPrefixLenRetType) {
	ret, _ = o.GetDefaultPrefixLenOk()
	return ret
}

// GetDefaultPrefixLenOk returns a tuple with the DefaultPrefixLen field value
// and a boolean to check if the value has been set.
func (o *RegionalAreaIPv4) GetDefaultPrefixLenOk() (ret RegionalAreaIPv4GetDefaultPrefixLenRetType, ok bool) {
	return getRegionalAreaIPv4GetDefaultPrefixLenAttributeTypeOk(o.DefaultPrefixLen)
}

// SetDefaultPrefixLen sets field value
func (o *RegionalAreaIPv4) SetDefaultPrefixLen(v RegionalAreaIPv4GetDefaultPrefixLenRetType) {
	setRegionalAreaIPv4GetDefaultPrefixLenAttributeType(&o.DefaultPrefixLen, v)
}

// GetMaxPrefixLen returns the MaxPrefixLen field value
func (o *RegionalAreaIPv4) GetMaxPrefixLen() (ret RegionalAreaIPv4GetMaxPrefixLenRetType) {
	ret, _ = o.GetMaxPrefixLenOk()
	return ret
}

// GetMaxPrefixLenOk returns a tuple with the MaxPrefixLen field value
// and a boolean to check if the value has been set.
func (o *RegionalAreaIPv4) GetMaxPrefixLenOk() (ret RegionalAreaIPv4GetMaxPrefixLenRetType, ok bool) {
	return getRegionalAreaIPv4GetMaxPrefixLenAttributeTypeOk(o.MaxPrefixLen)
}

// SetMaxPrefixLen sets field value
func (o *RegionalAreaIPv4) SetMaxPrefixLen(v RegionalAreaIPv4GetMaxPrefixLenRetType) {
	setRegionalAreaIPv4GetMaxPrefixLenAttributeType(&o.MaxPrefixLen, v)
}

// GetMinPrefixLen returns the MinPrefixLen field value
func (o *RegionalAreaIPv4) GetMinPrefixLen() (ret RegionalAreaIPv4GetMinPrefixLenRetType) {
	ret, _ = o.GetMinPrefixLenOk()
	return ret
}

// GetMinPrefixLenOk returns a tuple with the MinPrefixLen field value
// and a boolean to check if the value has been set.
func (o *RegionalAreaIPv4) GetMinPrefixLenOk() (ret RegionalAreaIPv4GetMinPrefixLenRetType, ok bool) {
	return getRegionalAreaIPv4GetMinPrefixLenAttributeTypeOk(o.MinPrefixLen)
}

// SetMinPrefixLen sets field value
func (o *RegionalAreaIPv4) SetMinPrefixLen(v RegionalAreaIPv4GetMinPrefixLenRetType) {
	setRegionalAreaIPv4GetMinPrefixLenAttributeType(&o.MinPrefixLen, v)
}

// GetNetworkRanges returns the NetworkRanges field value
func (o *RegionalAreaIPv4) GetNetworkRanges() (ret RegionalAreaIPv4GetNetworkRangesRetType) {
	ret, _ = o.GetNetworkRangesOk()
	return ret
}

// GetNetworkRangesOk returns a tuple with the NetworkRanges field value
// and a boolean to check if the value has been set.
func (o *RegionalAreaIPv4) GetNetworkRangesOk() (ret RegionalAreaIPv4GetNetworkRangesRetType, ok bool) {
	return getRegionalAreaIPv4GetNetworkRangesAttributeTypeOk(o.NetworkRanges)
}

// SetNetworkRanges sets field value
func (o *RegionalAreaIPv4) SetNetworkRanges(v RegionalAreaIPv4GetNetworkRangesRetType) {
	setRegionalAreaIPv4GetNetworkRangesAttributeType(&o.NetworkRanges, v)
}

// GetTransferNetwork returns the TransferNetwork field value
func (o *RegionalAreaIPv4) GetTransferNetwork() (ret RegionalAreaIPv4GetTransferNetworkRetType) {
	ret, _ = o.GetTransferNetworkOk()
	return ret
}

// GetTransferNetworkOk returns a tuple with the TransferNetwork field value
// and a boolean to check if the value has been set.
func (o *RegionalAreaIPv4) GetTransferNetworkOk() (ret RegionalAreaIPv4GetTransferNetworkRetType, ok bool) {
	return getRegionalAreaIPv4GetTransferNetworkAttributeTypeOk(o.TransferNetwork)
}

// SetTransferNetwork sets field value
func (o *RegionalAreaIPv4) SetTransferNetwork(v RegionalAreaIPv4GetTransferNetworkRetType) {
	setRegionalAreaIPv4GetTransferNetworkAttributeType(&o.TransferNetwork, v)
}

func (o RegionalAreaIPv4) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getRegionalAreaIPv4GetDefaultNameserversAttributeTypeOk(o.DefaultNameservers); ok {
		toSerialize["DefaultNameservers"] = val
	}
	if val, ok := getRegionalAreaIPv4GetDefaultPrefixLenAttributeTypeOk(o.DefaultPrefixLen); ok {
		toSerialize["DefaultPrefixLen"] = val
	}
	if val, ok := getRegionalAreaIPv4GetMaxPrefixLenAttributeTypeOk(o.MaxPrefixLen); ok {
		toSerialize["MaxPrefixLen"] = val
	}
	if val, ok := getRegionalAreaIPv4GetMinPrefixLenAttributeTypeOk(o.MinPrefixLen); ok {
		toSerialize["MinPrefixLen"] = val
	}
	if val, ok := getRegionalAreaIPv4GetNetworkRangesAttributeTypeOk(o.NetworkRanges); ok {
		toSerialize["NetworkRanges"] = val
	}
	if val, ok := getRegionalAreaIPv4GetTransferNetworkAttributeTypeOk(o.TransferNetwork); ok {
		toSerialize["TransferNetwork"] = val
	}
	return toSerialize, nil
}

type NullableRegionalAreaIPv4 struct {
	value *RegionalAreaIPv4
	isSet bool
}

func (v NullableRegionalAreaIPv4) Get() *RegionalAreaIPv4 {
	return v.value
}

func (v *NullableRegionalAreaIPv4) Set(val *RegionalAreaIPv4) {
	v.value = val
	v.isSet = true
}

func (v NullableRegionalAreaIPv4) IsSet() bool {
	return v.isSet
}

func (v *NullableRegionalAreaIPv4) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegionalAreaIPv4(val *RegionalAreaIPv4) *NullableRegionalAreaIPv4 {
	return &NullableRegionalAreaIPv4{value: val, isSet: true}
}

func (v NullableRegionalAreaIPv4) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegionalAreaIPv4) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
