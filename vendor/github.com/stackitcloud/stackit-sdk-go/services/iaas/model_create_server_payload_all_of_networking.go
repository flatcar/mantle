/*
IaaS-API

This API allows you to create and modify IaaS resources.

API version: 2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iaas

import (
	"encoding/json"
	"fmt"
)

// CreateServerPayloadAllOfNetworking - struct for CreateServerPayloadAllOfNetworking
type CreateServerPayloadAllOfNetworking struct {
	CreateServerNetworking         *CreateServerNetworking
	CreateServerNetworkingWithNics *CreateServerNetworkingWithNics
}

// CreateServerNetworkingAsCreateServerPayloadAllOfNetworking is a convenience function that returns CreateServerNetworking wrapped in CreateServerPayloadAllOfNetworking
func CreateServerNetworkingAsCreateServerPayloadAllOfNetworking(v *CreateServerNetworking) CreateServerPayloadAllOfNetworking {
	return CreateServerPayloadAllOfNetworking{
		CreateServerNetworking: v,
	}
}

// CreateServerNetworkingWithNicsAsCreateServerPayloadAllOfNetworking is a convenience function that returns CreateServerNetworkingWithNics wrapped in CreateServerPayloadAllOfNetworking
func CreateServerNetworkingWithNicsAsCreateServerPayloadAllOfNetworking(v *CreateServerNetworkingWithNics) CreateServerPayloadAllOfNetworking {
	return CreateServerPayloadAllOfNetworking{
		CreateServerNetworkingWithNics: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateServerPayloadAllOfNetworking) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// Workaround until upstream issue is fixed:
	// https://github.com/OpenAPITools/openapi-generator/issues/21751
	// Tracking issue on our side: https://jira.schwarz/browse/STACKITSDK-226
	// try to unmarshal data into CreateServerNetworking
	dstCreateServerPayloadAllOfNetworking1 := &CreateServerPayloadAllOfNetworking{}
	err = json.Unmarshal(data, &dstCreateServerPayloadAllOfNetworking1.CreateServerNetworking)
	if err == nil {
		jsonCreateServerNetworking, _ := json.Marshal(&dstCreateServerPayloadAllOfNetworking1.CreateServerNetworking)
		if string(jsonCreateServerNetworking) != "{}" { // empty struct
			dst.CreateServerNetworking = dstCreateServerPayloadAllOfNetworking1.CreateServerNetworking
			match++
		}
	}

	// try to unmarshal data into CreateServerNetworkingWithNics
	dstCreateServerPayloadAllOfNetworking2 := &CreateServerPayloadAllOfNetworking{}
	err = json.Unmarshal(data, &dstCreateServerPayloadAllOfNetworking2.CreateServerNetworkingWithNics)
	if err == nil {
		jsonCreateServerNetworkingWithNics, _ := json.Marshal(&dstCreateServerPayloadAllOfNetworking2.CreateServerNetworkingWithNics)
		if string(jsonCreateServerNetworkingWithNics) != "{}" { // empty struct
			dst.CreateServerNetworkingWithNics = dstCreateServerPayloadAllOfNetworking2.CreateServerNetworkingWithNics
			match++
		}
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CreateServerNetworking = nil
		dst.CreateServerNetworkingWithNics = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CreateServerPayloadAllOfNetworking)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CreateServerPayloadAllOfNetworking)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateServerPayloadAllOfNetworking) MarshalJSON() ([]byte, error) {
	if src.CreateServerNetworking != nil {
		return json.Marshal(&src.CreateServerNetworking)
	}

	if src.CreateServerNetworkingWithNics != nil {
		return json.Marshal(&src.CreateServerNetworkingWithNics)
	}

	return []byte("{}"), nil // no data in oneOf schemas => empty JSON object
}

// Get the actual instance
func (obj *CreateServerPayloadAllOfNetworking) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.CreateServerNetworking != nil {
		return obj.CreateServerNetworking
	}

	if obj.CreateServerNetworkingWithNics != nil {
		return obj.CreateServerNetworkingWithNics
	}

	// all schemas are nil
	return nil
}

type NullableCreateServerPayloadAllOfNetworking struct {
	value *CreateServerPayloadAllOfNetworking
	isSet bool
}

func (v NullableCreateServerPayloadAllOfNetworking) Get() *CreateServerPayloadAllOfNetworking {
	return v.value
}

func (v *NullableCreateServerPayloadAllOfNetworking) Set(val *CreateServerPayloadAllOfNetworking) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateServerPayloadAllOfNetworking) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateServerPayloadAllOfNetworking) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateServerPayloadAllOfNetworking(val *CreateServerPayloadAllOfNetworking) *NullableCreateServerPayloadAllOfNetworking {
	return &NullableCreateServerPayloadAllOfNetworking{value: val, isSet: true}
}

func (v NullableCreateServerPayloadAllOfNetworking) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateServerPayloadAllOfNetworking) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
