/*
IaaS-API

This API allows you to create and modify IaaS resources.

API version: 2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iaas

import (
	"encoding/json"
)

// checks if the BootVolumeSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BootVolumeSource{}

/*
	types and functions for id
*/

// isNotNullableString
type BootVolumeSourceGetIdAttributeType = *string

func getBootVolumeSourceGetIdAttributeTypeOk(arg BootVolumeSourceGetIdAttributeType) (ret BootVolumeSourceGetIdRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setBootVolumeSourceGetIdAttributeType(arg *BootVolumeSourceGetIdAttributeType, val BootVolumeSourceGetIdRetType) {
	*arg = &val
}

type BootVolumeSourceGetIdArgType = string
type BootVolumeSourceGetIdRetType = string

/*
	types and functions for type
*/

// isNotNullableString
type BootVolumeSourceGetTypeAttributeType = *string

func getBootVolumeSourceGetTypeAttributeTypeOk(arg BootVolumeSourceGetTypeAttributeType) (ret BootVolumeSourceGetTypeRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setBootVolumeSourceGetTypeAttributeType(arg *BootVolumeSourceGetTypeAttributeType, val BootVolumeSourceGetTypeRetType) {
	*arg = &val
}

type BootVolumeSourceGetTypeArgType = string
type BootVolumeSourceGetTypeRetType = string

// BootVolumeSource struct for BootVolumeSource
type BootVolumeSource struct {
	// Universally Unique Identifier (UUID).
	// REQUIRED
	Id BootVolumeSourceGetIdAttributeType `json:"id" required:"true"`
	// The source types of a boot volume. Possible values: `image`, `volume`.
	// REQUIRED
	Type BootVolumeSourceGetTypeAttributeType `json:"type" required:"true"`
}

type _BootVolumeSource BootVolumeSource

// NewBootVolumeSource instantiates a new BootVolumeSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBootVolumeSource(id BootVolumeSourceGetIdArgType, types BootVolumeSourceGetTypeArgType) *BootVolumeSource {
	this := BootVolumeSource{}
	setBootVolumeSourceGetIdAttributeType(&this.Id, id)
	setBootVolumeSourceGetTypeAttributeType(&this.Type, types)
	return &this
}

// NewBootVolumeSourceWithDefaults instantiates a new BootVolumeSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBootVolumeSourceWithDefaults() *BootVolumeSource {
	this := BootVolumeSource{}
	return &this
}

// GetId returns the Id field value
func (o *BootVolumeSource) GetId() (ret BootVolumeSourceGetIdRetType) {
	ret, _ = o.GetIdOk()
	return ret
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *BootVolumeSource) GetIdOk() (ret BootVolumeSourceGetIdRetType, ok bool) {
	return getBootVolumeSourceGetIdAttributeTypeOk(o.Id)
}

// SetId sets field value
func (o *BootVolumeSource) SetId(v BootVolumeSourceGetIdRetType) {
	setBootVolumeSourceGetIdAttributeType(&o.Id, v)
}

// GetType returns the Type field value
func (o *BootVolumeSource) GetType() (ret BootVolumeSourceGetTypeRetType) {
	ret, _ = o.GetTypeOk()
	return ret
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *BootVolumeSource) GetTypeOk() (ret BootVolumeSourceGetTypeRetType, ok bool) {
	return getBootVolumeSourceGetTypeAttributeTypeOk(o.Type)
}

// SetType sets field value
func (o *BootVolumeSource) SetType(v BootVolumeSourceGetTypeRetType) {
	setBootVolumeSourceGetTypeAttributeType(&o.Type, v)
}

func (o BootVolumeSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getBootVolumeSourceGetIdAttributeTypeOk(o.Id); ok {
		toSerialize["Id"] = val
	}
	if val, ok := getBootVolumeSourceGetTypeAttributeTypeOk(o.Type); ok {
		toSerialize["Type"] = val
	}
	return toSerialize, nil
}

type NullableBootVolumeSource struct {
	value *BootVolumeSource
	isSet bool
}

func (v NullableBootVolumeSource) Get() *BootVolumeSource {
	return v.value
}

func (v *NullableBootVolumeSource) Set(val *BootVolumeSource) {
	v.value = val
	v.isSet = true
}

func (v NullableBootVolumeSource) IsSet() bool {
	return v.isSet
}

func (v *NullableBootVolumeSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBootVolumeSource(val *BootVolumeSource) *NullableBootVolumeSource {
	return &NullableBootVolumeSource{value: val, isSet: true}
}

func (v NullableBootVolumeSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBootVolumeSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
