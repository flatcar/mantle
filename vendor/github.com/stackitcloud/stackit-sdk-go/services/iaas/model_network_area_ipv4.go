/*
IaaS-API

This API allows you to create and modify IaaS resources.

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iaas

import (
	"encoding/json"
)

// checks if the NetworkAreaIPv4 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkAreaIPv4{}

/*
	types and functions for defaultNameservers
*/

// isArray
type NetworkAreaIPv4GetDefaultNameserversAttributeType = *[]string
type NetworkAreaIPv4GetDefaultNameserversArgType = []string
type NetworkAreaIPv4GetDefaultNameserversRetType = []string

func getNetworkAreaIPv4GetDefaultNameserversAttributeTypeOk(arg NetworkAreaIPv4GetDefaultNameserversAttributeType) (ret NetworkAreaIPv4GetDefaultNameserversRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setNetworkAreaIPv4GetDefaultNameserversAttributeType(arg *NetworkAreaIPv4GetDefaultNameserversAttributeType, val NetworkAreaIPv4GetDefaultNameserversRetType) {
	*arg = &val
}

/*
	types and functions for networkRanges
*/

// isArray
type NetworkAreaIPv4GetNetworkRangesAttributeType = *[]NetworkRange
type NetworkAreaIPv4GetNetworkRangesArgType = []NetworkRange
type NetworkAreaIPv4GetNetworkRangesRetType = []NetworkRange

func getNetworkAreaIPv4GetNetworkRangesAttributeTypeOk(arg NetworkAreaIPv4GetNetworkRangesAttributeType) (ret NetworkAreaIPv4GetNetworkRangesRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setNetworkAreaIPv4GetNetworkRangesAttributeType(arg *NetworkAreaIPv4GetNetworkRangesAttributeType, val NetworkAreaIPv4GetNetworkRangesRetType) {
	*arg = &val
}

/*
	types and functions for routes
*/

// isArray
type NetworkAreaIPv4GetRoutesAttributeType = *[]Route
type NetworkAreaIPv4GetRoutesArgType = []Route
type NetworkAreaIPv4GetRoutesRetType = []Route

func getNetworkAreaIPv4GetRoutesAttributeTypeOk(arg NetworkAreaIPv4GetRoutesAttributeType) (ret NetworkAreaIPv4GetRoutesRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setNetworkAreaIPv4GetRoutesAttributeType(arg *NetworkAreaIPv4GetRoutesAttributeType, val NetworkAreaIPv4GetRoutesRetType) {
	*arg = &val
}

/*
	types and functions for transferNetwork
*/

// isNotNullableString
type NetworkAreaIPv4GetTransferNetworkAttributeType = *string

func getNetworkAreaIPv4GetTransferNetworkAttributeTypeOk(arg NetworkAreaIPv4GetTransferNetworkAttributeType) (ret NetworkAreaIPv4GetTransferNetworkRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setNetworkAreaIPv4GetTransferNetworkAttributeType(arg *NetworkAreaIPv4GetTransferNetworkAttributeType, val NetworkAreaIPv4GetTransferNetworkRetType) {
	*arg = &val
}

type NetworkAreaIPv4GetTransferNetworkArgType = string
type NetworkAreaIPv4GetTransferNetworkRetType = string

/*
	types and functions for defaultPrefixLen
*/

// isInteger
type NetworkAreaIPv4GetDefaultPrefixLenAttributeType = *int64
type NetworkAreaIPv4GetDefaultPrefixLenArgType = int64
type NetworkAreaIPv4GetDefaultPrefixLenRetType = int64

func getNetworkAreaIPv4GetDefaultPrefixLenAttributeTypeOk(arg NetworkAreaIPv4GetDefaultPrefixLenAttributeType) (ret NetworkAreaIPv4GetDefaultPrefixLenRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setNetworkAreaIPv4GetDefaultPrefixLenAttributeType(arg *NetworkAreaIPv4GetDefaultPrefixLenAttributeType, val NetworkAreaIPv4GetDefaultPrefixLenRetType) {
	*arg = &val
}

/*
	types and functions for maxPrefixLen
*/

// isInteger
type NetworkAreaIPv4GetMaxPrefixLenAttributeType = *int64
type NetworkAreaIPv4GetMaxPrefixLenArgType = int64
type NetworkAreaIPv4GetMaxPrefixLenRetType = int64

func getNetworkAreaIPv4GetMaxPrefixLenAttributeTypeOk(arg NetworkAreaIPv4GetMaxPrefixLenAttributeType) (ret NetworkAreaIPv4GetMaxPrefixLenRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setNetworkAreaIPv4GetMaxPrefixLenAttributeType(arg *NetworkAreaIPv4GetMaxPrefixLenAttributeType, val NetworkAreaIPv4GetMaxPrefixLenRetType) {
	*arg = &val
}

/*
	types and functions for minPrefixLen
*/

// isInteger
type NetworkAreaIPv4GetMinPrefixLenAttributeType = *int64
type NetworkAreaIPv4GetMinPrefixLenArgType = int64
type NetworkAreaIPv4GetMinPrefixLenRetType = int64

func getNetworkAreaIPv4GetMinPrefixLenAttributeTypeOk(arg NetworkAreaIPv4GetMinPrefixLenAttributeType) (ret NetworkAreaIPv4GetMinPrefixLenRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setNetworkAreaIPv4GetMinPrefixLenAttributeType(arg *NetworkAreaIPv4GetMinPrefixLenAttributeType, val NetworkAreaIPv4GetMinPrefixLenRetType) {
	*arg = &val
}

// NetworkAreaIPv4 The IPv4 properties of a network area.
type NetworkAreaIPv4 struct {
	// A list containing DNS Servers/Nameservers for IPv4.
	DefaultNameservers NetworkAreaIPv4GetDefaultNameserversAttributeType `json:"defaultNameservers,omitempty"`
	// A list of network ranges.
	NetworkRanges NetworkAreaIPv4GetNetworkRangesAttributeType `json:"networkRanges,omitempty"`
	// A list of routes.
	Routes NetworkAreaIPv4GetRoutesAttributeType `json:"routes,omitempty"`
	// Classless Inter-Domain Routing (CIDR).
	TransferNetwork NetworkAreaIPv4GetTransferNetworkAttributeType `json:"transferNetwork,omitempty"`
	// The default prefix length for networks in the network area.
	DefaultPrefixLen NetworkAreaIPv4GetDefaultPrefixLenAttributeType `json:"defaultPrefixLen,omitempty"`
	// The maximal prefix length for networks in the network area.
	MaxPrefixLen NetworkAreaIPv4GetMaxPrefixLenAttributeType `json:"maxPrefixLen,omitempty"`
	// The minimal prefix length for networks in the network area.
	MinPrefixLen NetworkAreaIPv4GetMinPrefixLenAttributeType `json:"minPrefixLen,omitempty"`
}

// NewNetworkAreaIPv4 instantiates a new NetworkAreaIPv4 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkAreaIPv4() *NetworkAreaIPv4 {
	this := NetworkAreaIPv4{}
	return &this
}

// NewNetworkAreaIPv4WithDefaults instantiates a new NetworkAreaIPv4 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkAreaIPv4WithDefaults() *NetworkAreaIPv4 {
	this := NetworkAreaIPv4{}
	var defaultPrefixLen int64 = 25
	this.DefaultPrefixLen = &defaultPrefixLen
	var maxPrefixLen int64 = 29
	this.MaxPrefixLen = &maxPrefixLen
	var minPrefixLen int64 = 24
	this.MinPrefixLen = &minPrefixLen
	return &this
}

// GetDefaultNameservers returns the DefaultNameservers field value if set, zero value otherwise.
func (o *NetworkAreaIPv4) GetDefaultNameservers() (res NetworkAreaIPv4GetDefaultNameserversRetType) {
	res, _ = o.GetDefaultNameserversOk()
	return
}

// GetDefaultNameserversOk returns a tuple with the DefaultNameservers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkAreaIPv4) GetDefaultNameserversOk() (ret NetworkAreaIPv4GetDefaultNameserversRetType, ok bool) {
	return getNetworkAreaIPv4GetDefaultNameserversAttributeTypeOk(o.DefaultNameservers)
}

// HasDefaultNameservers returns a boolean if a field has been set.
func (o *NetworkAreaIPv4) HasDefaultNameservers() bool {
	_, ok := o.GetDefaultNameserversOk()
	return ok
}

// SetDefaultNameservers gets a reference to the given []string and assigns it to the DefaultNameservers field.
func (o *NetworkAreaIPv4) SetDefaultNameservers(v NetworkAreaIPv4GetDefaultNameserversRetType) {
	setNetworkAreaIPv4GetDefaultNameserversAttributeType(&o.DefaultNameservers, v)
}

// GetNetworkRanges returns the NetworkRanges field value if set, zero value otherwise.
func (o *NetworkAreaIPv4) GetNetworkRanges() (res NetworkAreaIPv4GetNetworkRangesRetType) {
	res, _ = o.GetNetworkRangesOk()
	return
}

// GetNetworkRangesOk returns a tuple with the NetworkRanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkAreaIPv4) GetNetworkRangesOk() (ret NetworkAreaIPv4GetNetworkRangesRetType, ok bool) {
	return getNetworkAreaIPv4GetNetworkRangesAttributeTypeOk(o.NetworkRanges)
}

// HasNetworkRanges returns a boolean if a field has been set.
func (o *NetworkAreaIPv4) HasNetworkRanges() bool {
	_, ok := o.GetNetworkRangesOk()
	return ok
}

// SetNetworkRanges gets a reference to the given []NetworkRange and assigns it to the NetworkRanges field.
func (o *NetworkAreaIPv4) SetNetworkRanges(v NetworkAreaIPv4GetNetworkRangesRetType) {
	setNetworkAreaIPv4GetNetworkRangesAttributeType(&o.NetworkRanges, v)
}

// GetRoutes returns the Routes field value if set, zero value otherwise.
func (o *NetworkAreaIPv4) GetRoutes() (res NetworkAreaIPv4GetRoutesRetType) {
	res, _ = o.GetRoutesOk()
	return
}

// GetRoutesOk returns a tuple with the Routes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkAreaIPv4) GetRoutesOk() (ret NetworkAreaIPv4GetRoutesRetType, ok bool) {
	return getNetworkAreaIPv4GetRoutesAttributeTypeOk(o.Routes)
}

// HasRoutes returns a boolean if a field has been set.
func (o *NetworkAreaIPv4) HasRoutes() bool {
	_, ok := o.GetRoutesOk()
	return ok
}

// SetRoutes gets a reference to the given []Route and assigns it to the Routes field.
func (o *NetworkAreaIPv4) SetRoutes(v NetworkAreaIPv4GetRoutesRetType) {
	setNetworkAreaIPv4GetRoutesAttributeType(&o.Routes, v)
}

// GetTransferNetwork returns the TransferNetwork field value if set, zero value otherwise.
func (o *NetworkAreaIPv4) GetTransferNetwork() (res NetworkAreaIPv4GetTransferNetworkRetType) {
	res, _ = o.GetTransferNetworkOk()
	return
}

// GetTransferNetworkOk returns a tuple with the TransferNetwork field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkAreaIPv4) GetTransferNetworkOk() (ret NetworkAreaIPv4GetTransferNetworkRetType, ok bool) {
	return getNetworkAreaIPv4GetTransferNetworkAttributeTypeOk(o.TransferNetwork)
}

// HasTransferNetwork returns a boolean if a field has been set.
func (o *NetworkAreaIPv4) HasTransferNetwork() bool {
	_, ok := o.GetTransferNetworkOk()
	return ok
}

// SetTransferNetwork gets a reference to the given string and assigns it to the TransferNetwork field.
func (o *NetworkAreaIPv4) SetTransferNetwork(v NetworkAreaIPv4GetTransferNetworkRetType) {
	setNetworkAreaIPv4GetTransferNetworkAttributeType(&o.TransferNetwork, v)
}

// GetDefaultPrefixLen returns the DefaultPrefixLen field value if set, zero value otherwise.
func (o *NetworkAreaIPv4) GetDefaultPrefixLen() (res NetworkAreaIPv4GetDefaultPrefixLenRetType) {
	res, _ = o.GetDefaultPrefixLenOk()
	return
}

// GetDefaultPrefixLenOk returns a tuple with the DefaultPrefixLen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkAreaIPv4) GetDefaultPrefixLenOk() (ret NetworkAreaIPv4GetDefaultPrefixLenRetType, ok bool) {
	return getNetworkAreaIPv4GetDefaultPrefixLenAttributeTypeOk(o.DefaultPrefixLen)
}

// HasDefaultPrefixLen returns a boolean if a field has been set.
func (o *NetworkAreaIPv4) HasDefaultPrefixLen() bool {
	_, ok := o.GetDefaultPrefixLenOk()
	return ok
}

// SetDefaultPrefixLen gets a reference to the given int64 and assigns it to the DefaultPrefixLen field.
func (o *NetworkAreaIPv4) SetDefaultPrefixLen(v NetworkAreaIPv4GetDefaultPrefixLenRetType) {
	setNetworkAreaIPv4GetDefaultPrefixLenAttributeType(&o.DefaultPrefixLen, v)
}

// GetMaxPrefixLen returns the MaxPrefixLen field value if set, zero value otherwise.
func (o *NetworkAreaIPv4) GetMaxPrefixLen() (res NetworkAreaIPv4GetMaxPrefixLenRetType) {
	res, _ = o.GetMaxPrefixLenOk()
	return
}

// GetMaxPrefixLenOk returns a tuple with the MaxPrefixLen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkAreaIPv4) GetMaxPrefixLenOk() (ret NetworkAreaIPv4GetMaxPrefixLenRetType, ok bool) {
	return getNetworkAreaIPv4GetMaxPrefixLenAttributeTypeOk(o.MaxPrefixLen)
}

// HasMaxPrefixLen returns a boolean if a field has been set.
func (o *NetworkAreaIPv4) HasMaxPrefixLen() bool {
	_, ok := o.GetMaxPrefixLenOk()
	return ok
}

// SetMaxPrefixLen gets a reference to the given int64 and assigns it to the MaxPrefixLen field.
func (o *NetworkAreaIPv4) SetMaxPrefixLen(v NetworkAreaIPv4GetMaxPrefixLenRetType) {
	setNetworkAreaIPv4GetMaxPrefixLenAttributeType(&o.MaxPrefixLen, v)
}

// GetMinPrefixLen returns the MinPrefixLen field value if set, zero value otherwise.
func (o *NetworkAreaIPv4) GetMinPrefixLen() (res NetworkAreaIPv4GetMinPrefixLenRetType) {
	res, _ = o.GetMinPrefixLenOk()
	return
}

// GetMinPrefixLenOk returns a tuple with the MinPrefixLen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkAreaIPv4) GetMinPrefixLenOk() (ret NetworkAreaIPv4GetMinPrefixLenRetType, ok bool) {
	return getNetworkAreaIPv4GetMinPrefixLenAttributeTypeOk(o.MinPrefixLen)
}

// HasMinPrefixLen returns a boolean if a field has been set.
func (o *NetworkAreaIPv4) HasMinPrefixLen() bool {
	_, ok := o.GetMinPrefixLenOk()
	return ok
}

// SetMinPrefixLen gets a reference to the given int64 and assigns it to the MinPrefixLen field.
func (o *NetworkAreaIPv4) SetMinPrefixLen(v NetworkAreaIPv4GetMinPrefixLenRetType) {
	setNetworkAreaIPv4GetMinPrefixLenAttributeType(&o.MinPrefixLen, v)
}

func (o NetworkAreaIPv4) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getNetworkAreaIPv4GetDefaultNameserversAttributeTypeOk(o.DefaultNameservers); ok {
		toSerialize["DefaultNameservers"] = val
	}
	if val, ok := getNetworkAreaIPv4GetNetworkRangesAttributeTypeOk(o.NetworkRanges); ok {
		toSerialize["NetworkRanges"] = val
	}
	if val, ok := getNetworkAreaIPv4GetRoutesAttributeTypeOk(o.Routes); ok {
		toSerialize["Routes"] = val
	}
	if val, ok := getNetworkAreaIPv4GetTransferNetworkAttributeTypeOk(o.TransferNetwork); ok {
		toSerialize["TransferNetwork"] = val
	}
	if val, ok := getNetworkAreaIPv4GetDefaultPrefixLenAttributeTypeOk(o.DefaultPrefixLen); ok {
		toSerialize["DefaultPrefixLen"] = val
	}
	if val, ok := getNetworkAreaIPv4GetMaxPrefixLenAttributeTypeOk(o.MaxPrefixLen); ok {
		toSerialize["MaxPrefixLen"] = val
	}
	if val, ok := getNetworkAreaIPv4GetMinPrefixLenAttributeTypeOk(o.MinPrefixLen); ok {
		toSerialize["MinPrefixLen"] = val
	}
	return toSerialize, nil
}

type NullableNetworkAreaIPv4 struct {
	value *NetworkAreaIPv4
	isSet bool
}

func (v NullableNetworkAreaIPv4) Get() *NetworkAreaIPv4 {
	return v.value
}

func (v *NullableNetworkAreaIPv4) Set(val *NetworkAreaIPv4) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkAreaIPv4) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkAreaIPv4) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkAreaIPv4(val *NetworkAreaIPv4) *NullableNetworkAreaIPv4 {
	return &NullableNetworkAreaIPv4{value: val, isSet: true}
}

func (v NullableNetworkAreaIPv4) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkAreaIPv4) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
