/*
IaaS-API

This API allows you to create and modify IaaS resources.

API version: 2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iaas

import (
	"encoding/json"
)

// checks if the CreateNetworkIPv4WithPrefix type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateNetworkIPv4WithPrefix{}

/*
	types and functions for gateway
*/

// isNullableString
type CreateNetworkIPv4WithPrefixGetGatewayAttributeType = *NullableString

func getCreateNetworkIPv4WithPrefixGetGatewayAttributeTypeOk(arg CreateNetworkIPv4WithPrefixGetGatewayAttributeType) (ret CreateNetworkIPv4WithPrefixGetGatewayRetType, ok bool) {
	if arg == nil {
		return nil, false
	}
	return arg.Get(), true
}

func setCreateNetworkIPv4WithPrefixGetGatewayAttributeType(arg *CreateNetworkIPv4WithPrefixGetGatewayAttributeType, val CreateNetworkIPv4WithPrefixGetGatewayRetType) {
	if IsNil(*arg) {
		*arg = NewNullableString(val)
	} else {
		(*arg).Set(val)
	}
}

type CreateNetworkIPv4WithPrefixGetGatewayArgType = *string
type CreateNetworkIPv4WithPrefixGetGatewayRetType = *string

/*
	types and functions for nameservers
*/

// isArray
type CreateNetworkIPv4WithPrefixGetNameserversAttributeType = *[]string
type CreateNetworkIPv4WithPrefixGetNameserversArgType = []string
type CreateNetworkIPv4WithPrefixGetNameserversRetType = []string

func getCreateNetworkIPv4WithPrefixGetNameserversAttributeTypeOk(arg CreateNetworkIPv4WithPrefixGetNameserversAttributeType) (ret CreateNetworkIPv4WithPrefixGetNameserversRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setCreateNetworkIPv4WithPrefixGetNameserversAttributeType(arg *CreateNetworkIPv4WithPrefixGetNameserversAttributeType, val CreateNetworkIPv4WithPrefixGetNameserversRetType) {
	*arg = &val
}

/*
	types and functions for prefix
*/

// isNotNullableString
type CreateNetworkIPv4WithPrefixGetPrefixAttributeType = *string

func getCreateNetworkIPv4WithPrefixGetPrefixAttributeTypeOk(arg CreateNetworkIPv4WithPrefixGetPrefixAttributeType) (ret CreateNetworkIPv4WithPrefixGetPrefixRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setCreateNetworkIPv4WithPrefixGetPrefixAttributeType(arg *CreateNetworkIPv4WithPrefixGetPrefixAttributeType, val CreateNetworkIPv4WithPrefixGetPrefixRetType) {
	*arg = &val
}

type CreateNetworkIPv4WithPrefixGetPrefixArgType = string
type CreateNetworkIPv4WithPrefixGetPrefixRetType = string

// CreateNetworkIPv4WithPrefix The create request for an IPv4 network with a specified prefix.
type CreateNetworkIPv4WithPrefix struct {
	// The IPv4 gateway of a network. If not specified the first IP of the network will be assigned as the gateway. If 'null' is sent, then the network doesn't have a gateway.
	Gateway CreateNetworkIPv4WithPrefixGetGatewayAttributeType `json:"gateway,omitempty"`
	// A list containing DNS Servers/Nameservers for IPv4.
	Nameservers CreateNetworkIPv4WithPrefixGetNameserversAttributeType `json:"nameservers,omitempty"`
	// IPv4 Classless Inter-Domain Routing (CIDR).
	// REQUIRED
	Prefix CreateNetworkIPv4WithPrefixGetPrefixAttributeType `json:"prefix" required:"true"`
}

type _CreateNetworkIPv4WithPrefix CreateNetworkIPv4WithPrefix

// NewCreateNetworkIPv4WithPrefix instantiates a new CreateNetworkIPv4WithPrefix object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateNetworkIPv4WithPrefix(prefix CreateNetworkIPv4WithPrefixGetPrefixArgType) *CreateNetworkIPv4WithPrefix {
	this := CreateNetworkIPv4WithPrefix{}
	setCreateNetworkIPv4WithPrefixGetPrefixAttributeType(&this.Prefix, prefix)
	return &this
}

// NewCreateNetworkIPv4WithPrefixWithDefaults instantiates a new CreateNetworkIPv4WithPrefix object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateNetworkIPv4WithPrefixWithDefaults() *CreateNetworkIPv4WithPrefix {
	this := CreateNetworkIPv4WithPrefix{}
	return &this
}

// GetGateway returns the Gateway field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateNetworkIPv4WithPrefix) GetGateway() (res CreateNetworkIPv4WithPrefixGetGatewayRetType) {
	res, _ = o.GetGatewayOk()
	return
}

// GetGatewayOk returns a tuple with the Gateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateNetworkIPv4WithPrefix) GetGatewayOk() (ret CreateNetworkIPv4WithPrefixGetGatewayRetType, ok bool) {
	return getCreateNetworkIPv4WithPrefixGetGatewayAttributeTypeOk(o.Gateway)
}

// HasGateway returns a boolean if a field has been set.
func (o *CreateNetworkIPv4WithPrefix) HasGateway() bool {
	_, ok := o.GetGatewayOk()
	return ok
}

// SetGateway gets a reference to the given string and assigns it to the Gateway field.
func (o *CreateNetworkIPv4WithPrefix) SetGateway(v CreateNetworkIPv4WithPrefixGetGatewayRetType) {
	setCreateNetworkIPv4WithPrefixGetGatewayAttributeType(&o.Gateway, v)
}

// SetGatewayNil sets the value for Gateway to be an explicit nil
func (o *CreateNetworkIPv4WithPrefix) SetGatewayNil() {
	o.Gateway = nil
}

// UnsetGateway ensures that no value is present for Gateway, not even an explicit nil
func (o *CreateNetworkIPv4WithPrefix) UnsetGateway() {
	o.Gateway = nil
}

// GetNameservers returns the Nameservers field value if set, zero value otherwise.
func (o *CreateNetworkIPv4WithPrefix) GetNameservers() (res CreateNetworkIPv4WithPrefixGetNameserversRetType) {
	res, _ = o.GetNameserversOk()
	return
}

// GetNameserversOk returns a tuple with the Nameservers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateNetworkIPv4WithPrefix) GetNameserversOk() (ret CreateNetworkIPv4WithPrefixGetNameserversRetType, ok bool) {
	return getCreateNetworkIPv4WithPrefixGetNameserversAttributeTypeOk(o.Nameservers)
}

// HasNameservers returns a boolean if a field has been set.
func (o *CreateNetworkIPv4WithPrefix) HasNameservers() bool {
	_, ok := o.GetNameserversOk()
	return ok
}

// SetNameservers gets a reference to the given []string and assigns it to the Nameservers field.
func (o *CreateNetworkIPv4WithPrefix) SetNameservers(v CreateNetworkIPv4WithPrefixGetNameserversRetType) {
	setCreateNetworkIPv4WithPrefixGetNameserversAttributeType(&o.Nameservers, v)
}

// GetPrefix returns the Prefix field value
func (o *CreateNetworkIPv4WithPrefix) GetPrefix() (ret CreateNetworkIPv4WithPrefixGetPrefixRetType) {
	ret, _ = o.GetPrefixOk()
	return ret
}

// GetPrefixOk returns a tuple with the Prefix field value
// and a boolean to check if the value has been set.
func (o *CreateNetworkIPv4WithPrefix) GetPrefixOk() (ret CreateNetworkIPv4WithPrefixGetPrefixRetType, ok bool) {
	return getCreateNetworkIPv4WithPrefixGetPrefixAttributeTypeOk(o.Prefix)
}

// SetPrefix sets field value
func (o *CreateNetworkIPv4WithPrefix) SetPrefix(v CreateNetworkIPv4WithPrefixGetPrefixRetType) {
	setCreateNetworkIPv4WithPrefixGetPrefixAttributeType(&o.Prefix, v)
}

func (o CreateNetworkIPv4WithPrefix) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getCreateNetworkIPv4WithPrefixGetGatewayAttributeTypeOk(o.Gateway); ok {
		toSerialize["Gateway"] = val
	}
	if val, ok := getCreateNetworkIPv4WithPrefixGetNameserversAttributeTypeOk(o.Nameservers); ok {
		toSerialize["Nameservers"] = val
	}
	if val, ok := getCreateNetworkIPv4WithPrefixGetPrefixAttributeTypeOk(o.Prefix); ok {
		toSerialize["Prefix"] = val
	}
	return toSerialize, nil
}

type NullableCreateNetworkIPv4WithPrefix struct {
	value *CreateNetworkIPv4WithPrefix
	isSet bool
}

func (v NullableCreateNetworkIPv4WithPrefix) Get() *CreateNetworkIPv4WithPrefix {
	return v.value
}

func (v *NullableCreateNetworkIPv4WithPrefix) Set(val *CreateNetworkIPv4WithPrefix) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateNetworkIPv4WithPrefix) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateNetworkIPv4WithPrefix) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateNetworkIPv4WithPrefix(val *CreateNetworkIPv4WithPrefix) *NullableCreateNetworkIPv4WithPrefix {
	return &NullableCreateNetworkIPv4WithPrefix{value: val, isSet: true}
}

func (v NullableCreateNetworkIPv4WithPrefix) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateNetworkIPv4WithPrefix) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
